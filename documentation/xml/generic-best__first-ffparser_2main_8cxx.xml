<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="generic-best__first-ffparser_2main_8cxx" kind="file" language="C++">
    <compoundname>main.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes refid="ff__to__aptk_8hxx" local="no">ff_to_aptk.hxx</includes>
    <includes refid="strips__prob_8hxx" local="no">strips_prob.hxx</includes>
    <includes refid="fluent_8hxx" local="no">fluent.hxx</includes>
    <includes refid="action_8hxx" local="no">action.hxx</includes>
    <includes refid="cond__eff_8hxx" local="no">cond_eff.hxx</includes>
    <includes refid="strips__state_8hxx" local="no">strips_state.hxx</includes>
    <includes refid="fwd__search__prob_8hxx" local="no">fwd_search_prob.hxx</includes>
    <includes refid="h__1_8hxx" local="no">h_1.hxx</includes>
    <includes refid="rp__heuristic_8hxx" local="no">rp_heuristic.hxx</includes>
    <includes refid="open__list_8hxx" local="no">open_list.hxx</includes>
    <includes refid="string__conversions_8hxx" local="no">string_conversions.hxx</includes>
    <includes refid="at__bfs_8hxx" local="no">at_bfs.hxx</includes>
    <includes local="no">boost/program_options.hpp</includes>
    <includes refid="legacy__ff_2generic-best__first-ffparser_2ff__gbfs_8hxx" local="no">ff_gbfs.hxx</includes>
    <includes refid="legacy__ff_2generic-best__first-ffparser_2ff__rp__heuristic_8hxx" local="no">ff_rp_heuristic.hxx</includes>
    <includes refid="layered__h__max_8hxx" local="no">layered_h_max.hxx</includes>
    <incdepgraph>
      <node id="56">
        <label>list</label>
      </node>
      <node id="49">
        <label>iomanip</label>
      </node>
      <node id="22">
        <label>functional</label>
      </node>
      <node id="21">
        <label>queue</label>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
      <node id="27">
        <label>mutex_set.hxx</label>
        <link refid="mutex__set_8hxx_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>sys/times.h</label>
      </node>
      <node id="33">
        <label>search_prob.hxx</label>
        <link refid="search__prob_8hxx_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>fluent.hxx</label>
        <link refid="fluent_8hxx_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cstdint</label>
      </node>
      <node id="24">
        <label>match_tree.hxx</label>
        <link refid="match__tree_8hxx_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>at_bfs.hxx</label>
        <link refid="at__bfs_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>succ_gen.hxx</label>
        <link refid="succ__gen_8hxx_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>watched_lit_succ_gen.hxx</label>
        <link refid="watched__lit__succ__gen_8hxx_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>ff_rp_heuristic.hxx</label>
        <link refid="legacy__ff_2generic-best__first-ffparser_2ff__rp__heuristic_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cassert</label>
      </node>
      <node id="41">
        <label>boost/heap/fibonacci_heap.hpp</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="32">
        <label>fwd_search_prob.hxx</label>
        <link refid="fwd__search__prob_8hxx_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>action.hxx</label>
        <link refid="action_8hxx_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="52">
        <label>boost/program_options.hpp</label>
      </node>
      <node id="38">
        <label>boost/circular_buffer.hpp</label>
      </node>
      <node id="50">
        <label>closed_list.hxx</label>
        <link refid="closed__list_8hxx_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cond_eff.hxx</label>
        <link refid="cond__eff_8hxx_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>sys/resource.h</label>
      </node>
      <node id="35">
        <label>heuristic.hxx</label>
        <link refid="heuristic_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ff_to_aptk.hxx</label>
        <link refid="ff__to__aptk_8hxx_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>unistd.h</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="34">
        <label>h_1.hxx</label>
        <link refid="h__1_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>layered_h_max.hxx</label>
        <link refid="layered__h__max_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
      <node id="43">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>bit_array.hxx</label>
        <link refid="bit__array_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>resources_control.hxx</label>
        <link refid="resources__control_8hxx_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>math.h</label>
      </node>
      <node id="13">
        <label>bit_set.hxx</label>
        <link refid="bit__set_8hxx_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>types.hxx</label>
        <link refid="types_8hxx_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>iosfwd</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>deque</label>
      </node>
      <node id="51">
        <label>unordered_map</label>
      </node>
      <node id="39">
        <label>rp_heuristic.hxx</label>
        <link refid="rp__heuristic_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>ext_math.hxx</label>
        <link refid="ext__math_8hxx_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>ff_gbfs.hxx</label>
        <link refid="legacy__ff_2generic-best__first-ffparser_2ff__gbfs_8hxx_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>open_list.hxx</label>
        <link refid="open__list_8hxx_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>strips_prob.hxx</label>
        <link refid="strips__prob_8hxx_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx</label>
        <link refid="generic-best__first-ffparser_2main_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>set</label>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>cstring</label>
      </node>
      <node id="30">
        <label>strips_state.hxx</label>
        <link refid="strips__state_8hxx_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>string_conversions.hxx</label>
        <link refid="string__conversions_8hxx_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1aa53874f179f22b6f31f64bc196181ef3" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1bfs_1_1Node" kindref="compound">aptk::search::bfs::Node</ref>&lt; <ref refid="classaptk_1_1State" kindref="compound">aptk::State</ref> &gt;</type>
        <definition>typedef aptk::search::bfs::Node&lt; aptk::State &gt; Search_Node</definition>
        <argsstring></argsstring>
        <name>Search_Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="74" column="31" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a36350f7a121f98a1b374cddde3331993" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1FF__GBFS__Node" kindref="compound">aptk::search::FF_GBFS_Node</ref>&lt; <ref refid="classaptk_1_1State" kindref="compound">aptk::State</ref> &gt;</type>
        <definition>typedef aptk::search::FF_GBFS_Node&lt; aptk::State &gt; FF_Search_Node</definition>
        <argsstring></argsstring>
        <name>FF_Search_Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="75" column="34" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a15485564ec5bb401295a6864bf9868cc" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1Node__Comparer" kindref="compound">Node_Comparer</ref>&lt; <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> &gt;</type>
        <definition>typedef Node_Comparer&lt; Search_Node &gt; Tie_Breaking_Algorithm</definition>
        <argsstring></argsstring>
        <name>Tie_Breaking_Algorithm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="79" column="21" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1ac2d818c5d1c6534039daf8c24789513c" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1Node__Comparer__HA" kindref="compound">Node_Comparer_HA</ref>&lt; <ref refid="classaptk_1_1search_1_1FF__GBFS__Node" kindref="compound">FF_Search_Node</ref> &gt;</type>
        <definition>typedef Node_Comparer_HA&lt; FF_Search_Node &gt; FF_Tie_Breaking</definition>
        <argsstring></argsstring>
        <name>FF_Tie_Breaking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="80" column="24" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1aecd3cd638d1d02720b9ba10829aa6508" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">Open_List</ref>&lt; <ref refid="classaptk_1_1search_1_1Node__Comparer__3H" kindref="compound">Tie_Breaking_Algorithm</ref>, <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> &gt;</type>
        <definition>typedef Open_List&lt; Tie_Breaking_Algorithm, Search_Node &gt; BFS_Open_List</definition>
        <argsstring></argsstring>
        <name>BFS_Open_List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="83" column="17" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1aacb96724fa0f56f9bbbd12c43b91281d" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">Open_List</ref>&lt; <ref refid="classaptk_1_1search_1_1Node__Comparer__HA" kindref="compound">FF_Tie_Breaking</ref>, <ref refid="classaptk_1_1search_1_1FF__GBFS__Node" kindref="compound">FF_Search_Node</ref> &gt;</type>
        <definition>typedef Open_List&lt; FF_Tie_Breaking, FF_Search_Node &gt; FF_Open_List</definition>
        <argsstring></argsstring>
        <name>FF_Open_List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="84" column="17" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a99a5f596999cb2f3e37f4dd1f69f7fc9" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H1_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H__Add__Evaluation__Function" kindref="compound">H_Add_Evaluation_Function</ref> &gt;</type>
        <definition>typedef H1_Heuristic&lt;Fwd_Search_Problem, H_Add_Evaluation_Function&gt; H_Add_Fwd</definition>
        <argsstring></argsstring>
        <name>H_Add_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="87" column="20" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1ac53394fc5cc5242ad2218eb49e8bc072" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H1_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H__Max__Evaluation__Function" kindref="compound">H_Max_Evaluation_Function</ref> &gt;</type>
        <definition>typedef H1_Heuristic&lt;Fwd_Search_Problem, H_Max_Evaluation_Function&gt; H_Max_Fwd</definition>
        <argsstring></argsstring>
        <name>H_Max_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="88" column="21" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a628600b296a42c0d3627843885b653dc" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1Layered__H__Max" kindref="compound">Layered_H_Max</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref> &gt;</type>
        <definition>typedef Layered_H_Max&lt; Fwd_Search_Problem &gt; Alt_H_Max</definition>
        <argsstring></argsstring>
        <name>Alt_H_Max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="89" column="30" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1aacad699a82f234a2f21837aec324098e" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">Relaxed_Plan_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Add_Fwd</ref> &gt;</type>
        <definition>typedef Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Add_Fwd &gt; H_Add_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>H_Add_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="90" column="30" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1abb8705793fe527e71d1ac643a8a40f78" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">Relaxed_Plan_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Max_Fwd</ref> &gt;</type>
        <definition>typedef Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Max_Fwd &gt; H_Max_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>H_Max_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="91" column="30" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1ac6b8a8e9e6153612add80c75e83f8799" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_Relaxed_Plan_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Add_Fwd</ref> &gt;</type>
        <definition>typedef FF_Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Add_Fwd &gt; FF_H_Add_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>FF_H_Add_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="92" column="33" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a18f5afc44a982b734c2e7f9f254a0a1d" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_Relaxed_Plan_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Max_Fwd</ref> &gt;</type>
        <definition>typedef FF_Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Max_Fwd &gt; FF_H_Max_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>FF_H_Max_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="93" column="33" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1afe0b3a81eaadf87de9004aca94c62e88" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_Relaxed_Plan_Heuristic</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1Layered__H__Max" kindref="compound">Alt_H_Max</ref> &gt;</type>
        <definition>typedef FF_Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, Alt_H_Max &gt; Classic_FF_H_Max_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>Classic_FF_H_Max_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="94" column="48" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1ad82799900fb92828167c5db059be2816" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">AT_BFS_SQ_SH</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">H_Max_Rp_Fwd</ref>, <ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">BFS_Open_List</ref> &gt;</type>
        <definition>typedef AT_BFS_SQ_SH&lt; Fwd_Search_Problem, H_Max_Rp_Fwd, BFS_Open_List &gt; GBFS_H_Max_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>GBFS_H_Max_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="98" column="20" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a84bee188716616c1d7c19114cd2da961" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">AT_BFS_SQ_SH</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">H_Add_Rp_Fwd</ref>, <ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">BFS_Open_List</ref> &gt;</type>
        <definition>typedef AT_BFS_SQ_SH&lt; Fwd_Search_Problem, H_Add_Rp_Fwd, BFS_Open_List &gt; GBFS_H_Add_Rp_Fwd</definition>
        <argsstring></argsstring>
        <name>GBFS_H_Add_Rp_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="99" column="24" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a1f445185bd3172da9312ed0d792a08c3" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">AT_BFS_SQ_SH</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Add_Fwd</ref>, <ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">BFS_Open_List</ref> &gt;</type>
        <definition>typedef AT_BFS_SQ_SH&lt; Fwd_Search_Problem, H_Add_Fwd, BFS_Open_List &gt; GBFS_H_Add_Fwd</definition>
        <argsstring></argsstring>
        <name>GBFS_H_Add_Fwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="100" column="24" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1ab1e6c39942cbb26086d651ab3eb4e2bf" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_H_Add_Rp_Fwd</ref>, <ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">FF_Open_List</ref> &gt;</type>
        <definition>typedef FF_GBFS&lt; Fwd_Search_Problem, FF_H_Add_Rp_Fwd, FF_Open_List &gt; FF_GBFS_H_Add</definition>
        <argsstring></argsstring>
        <name>FF_GBFS_H_Add</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="101" column="19" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1a5280d191480659f5f018fb4ce54ce6d7" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_H_Max_Rp_Fwd</ref>, <ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">FF_Open_List</ref> &gt;</type>
        <definition>typedef FF_GBFS&lt; Fwd_Search_Problem, FF_H_Max_Rp_Fwd, FF_Open_List &gt; FF_GBFS_H_Max</definition>
        <argsstring></argsstring>
        <name>FF_GBFS_H_Max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="102" column="18" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="generic-best__first-ffparser_2main_8cxx_1aeb2845951fcfa2abb1f0faa72027b3aa" prot="public" static="no">
        <type><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS</ref>&lt; <ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>, <ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">Classic_FF_H_Max_Rp_Fwd</ref>, <ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">FF_Open_List</ref> &gt;</type>
        <definition>typedef FF_GBFS&lt; Fwd_Search_Problem, Classic_FF_H_Max_Rp_Fwd, FF_Open_List &gt; FF_GBFS_Classic_H_Max</definition>
        <argsstring></argsstring>
        <name>FF_GBFS_Classic_H_Max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="103" column="18" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="generic-best__first-ffparser_2main_8cxx_1a3bc1b7ccd2286bfa5fdf7c66d435c38d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float do_search</definition>
        <argsstring>(Fwd_Search_Problem &amp;search_prob, float &amp;cost, std::ofstream &amp;details, std::string plan_filename, int heuristic, bool anytime)</argsstring>
        <name>do_search</name>
        <param>
          <type><ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref> &amp;</type>
          <declname>search_prob</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>cost</declname>
        </param>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>details</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>plan_filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>heuristic</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>anytime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="107" column="7" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="107" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="generic-best__first-ffparser_2main_8cxx_1a2ca0d540374ae034c0f2bdb2ffa5d7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void report_no_solution</definition>
        <argsstring>(std::string reason, std::string plan_filename)</argsstring>
        <name>report_no_solution</name>
        <param>
          <type>std::string</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>plan_filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="438" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="438" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="generic-best__first-ffparser_2main_8cxx_1a7a3c155521f22e294f3a071859403bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void process_command_line_options</definition>
        <argsstring>(int ac, char **av, po::variables_map &amp;vars)</argsstring>
        <name>process_command_line_options</name>
        <param>
          <type>int</type>
          <declname>ac</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>av</declname>
        </param>
        <param>
          <type>po::variables_map &amp;</type>
          <declname>vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="446" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="446" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="generic-best__first-ffparser_2main_8cxx_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" line="478" column="5" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx" bodystart="478" bodyend="567"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Lightweight<sp/>Automated<sp/>Planning<sp/>Toolkit</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(C)<sp/>2012</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Miquel<sp/>Ramirez<sp/>&lt;miquel.ramirez@rmit.edu.au&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Nir<sp/>Lipovetzky<sp/>&lt;nirlipo@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="8"><highlight class="comment">it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment">the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="10"><highlight class="comment">(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment">GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment">along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MRJ:<sp/>In<sp/>this<sp/>example,<sp/>we&apos;ll<sp/>show<sp/>how<sp/>to<sp/>create<sp/>a<sp/>search<sp/>problem<sp/>out<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>planning<sp/>problem<sp/>we<sp/>acquired<sp/>from<sp/>some<sp/>external<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ff_to_aptk.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;strips_prob.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fluent.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;action.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cond_eff.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;strips_state.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fwd_search_prob.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;h_1.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rp_heuristic.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;open_list.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_conversions.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;at_bfs.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/program_options.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ff_gbfs.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ff_rp_heuristic.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;layered_h_max.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">po<sp/>=<sp/>boost::program_options;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">aptk::STRIPS_Problem</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">aptk::agnostic::Fwd_Search_Problem</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">aptk::agnostic::H1_Heuristic</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1H__Add__Evaluation__Function" kindref="compound">aptk::agnostic::H_Add_Evaluation_Function</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1H__Max__Evaluation__Function" kindref="compound">aptk::agnostic::H_Max_Evaluation_Function</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">aptk::agnostic::Relaxed_Plan_Heuristic</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">aptk::agnostic::FF_Relaxed_Plan_Heuristic</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Layered__H__Max" kindref="compound">aptk::agnostic::Layered_H_Max</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">aptk::search::Open_List</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">aptk::search::bfs::AT_BFS_SQ_SH</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">aptk::search::FF_GBFS</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Node__Comparer" kindref="compound">aptk::search::Node_Comparer</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Node__Comparer__HA" kindref="compound">aptk::search::Node_Comparer_HA</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//using<sp/>aptk::search::gbfs_mh::Node;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MRJ:<sp/>We<sp/>start<sp/>defining<sp/>the<sp/>type<sp/>of<sp/>nodes<sp/>for<sp/>our<sp/>planner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1Node" kindref="compound">aptk::search::bfs::Node&lt; aptk::State &gt;</ref><sp/><sp/><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS__Node" kindref="compound">aptk::search::FF_GBFS_Node&lt; aptk::State &gt;</ref><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS__Node" kindref="compound">FF_Search_Node</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MRJ:<sp/>Then<sp/>we<sp/>define<sp/>the<sp/>type<sp/>of<sp/>the<sp/>tie-breaking<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>open<sp/>list<sp/>we<sp/>are<sp/>going<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Node__Comparer" kindref="compound">Node_Comparer&lt; Search_Node &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Node__Comparer__3H" kindref="compound">Tie_Breaking_Algorithm</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Node__Comparer__HA" kindref="compound">Node_Comparer_HA&lt; FF_Search_Node &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Node__Comparer__HA" kindref="compound">FF_Tie_Breaking</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MRJ:<sp/>Now<sp/>we<sp/>define<sp/>the<sp/>Open<sp/>List<sp/>type<sp/>by<sp/>combining<sp/>the<sp/>types<sp/>we<sp/>have<sp/>defined<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">Open_List&lt; Tie_Breaking_Algorithm, Search_Node &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">BFS_Open_List</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">Open_List&lt; FF_Tie_Breaking, FF_Search_Node &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1Open__List" kindref="compound">FF_Open_List</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MRJ:<sp/>Now<sp/>we<sp/>define<sp/>the<sp/>heuristics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H1_Heuristic&lt;Fwd_Search_Problem, H_Add_Evaluation_Function&gt;</ref><sp/><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Add_Fwd</ref>;<sp/></highlight><highlight class="comment">//,<sp/>aptk::agnostic::H1_Cost_Function::Ignore_Costs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H1_Heuristic&lt;Fwd_Search_Problem, H_Max_Evaluation_Function&gt;</ref><sp/><ref refid="classaptk_1_1agnostic_1_1H1__Heuristic" kindref="compound">H_Max_Fwd</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Layered__H__Max" kindref="compound">Layered_H_Max&lt; Fwd_Search_Problem &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Layered__H__Max" kindref="compound">Alt_H_Max</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Add_Fwd &gt;</ref><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">H_Add_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Max_Fwd &gt;</ref><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Relaxed__Plan__Heuristic" kindref="compound">H_Max_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Add_Fwd &gt;</ref><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_H_Add_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, H_Max_Fwd &gt;</ref><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_H_Max_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">FF_Relaxed_Plan_Heuristic&lt; Fwd_Search_Problem, Alt_H_Max &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1FF__Relaxed__Plan__Heuristic" kindref="compound">Classic_FF_H_Max_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MRJ:<sp/>Now<sp/>we&apos;re<sp/>ready<sp/>to<sp/>define<sp/>the<sp/>BFS<sp/>algorithm<sp/>we&apos;re<sp/>going<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">AT_BFS_SQ_SH&lt; Fwd_Search_Problem, H_Max_Rp_Fwd, BFS_Open_List &gt;</ref><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">GBFS_H_Max_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">AT_BFS_SQ_SH&lt; Fwd_Search_Problem, H_Add_Rp_Fwd, BFS_Open_List &gt;</ref><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">GBFS_H_Add_Rp_Fwd</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">AT_BFS_SQ_SH&lt; Fwd_Search_Problem, H_Add_Fwd, BFS_Open_List &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">GBFS_H_Add_Fwd</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS&lt; Fwd_Search_Problem, FF_H_Add_Rp_Fwd, FF_Open_List &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS_H_Add</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS&lt; Fwd_Search_Problem, FF_H_Max_Rp_Fwd, FF_Open_List &gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS_H_Max</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS&lt; Fwd_Search_Problem, Classic_FF_H_Max_Rp_Fwd, FF_Open_List &gt;</ref><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS_Classic_H_Max</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>do_search(<sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref>&amp;<sp/>search_prob,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>cost,std::ofstream&amp;<sp/>details,<sp/>std::string<sp/>plan_filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heuristic,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anytime<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>aptk::Action_Idx<sp/>&gt;<sp/>plan;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>cost<sp/>=<sp/>infty;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(heuristic<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">GBFS_H_Add_Fwd</ref><sp/>engine(<sp/>search_prob<sp/>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.set_greedy(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.set_delay_eval(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.start();<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_0<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_0<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>engine.find_solution(<sp/>cost,<sp/>plan<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plan.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>plan.size();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>k+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>&amp;<sp/>a<sp/>=<sp/>*(search_prob.task().actions()[<sp/>plan[k]<sp/>]);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>a.signature();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/>a.signature()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>plan<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_f<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_f<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>tf;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_0<sp/>=<sp/>expanded_f;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_0<sp/>=<sp/>generated_f;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.clear();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!anytime)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>aptk::time_used()<sp/>-<sp/>ref;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>generated<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>speed:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()/total_time<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nodes/sec&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>expanded<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.expanded()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>pruned<sp/>by<sp/>bound:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.pruned_by_bound()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead-end<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.dead_ends()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_time;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">GBFS_H_Add_Rp_Fwd</ref><sp/>engine(<sp/>search_prob<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.set_greedy(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.set_delay_eval(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.start();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_0<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_0<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>engine.find_solution(<sp/>cost,<sp/>plan<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plan.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>anytime<sp/>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>plan.size();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>k+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>&amp;<sp/>a<sp/>=<sp/>*(search_prob.task().actions()[<sp/>plan[k]<sp/>]);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>a.signature();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/>a.signature()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>plan<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_f<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_f<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime){</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>tf;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_0<sp/>=<sp/>expanded_f;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_0<sp/>=<sp/>generated_f;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.clear();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!anytime)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>aptk::time_used()<sp/>-<sp/>ref;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>generated<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>expanded<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.expanded()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>pruned<sp/>by<sp/>bound:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.pruned_by_bound()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead-end<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.dead_ends()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_time;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1bfs_1_1AT__BFS__SQ__SH" kindref="compound">GBFS_H_Max_Rp_Fwd</ref><sp/>engine(<sp/>search_prob<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.set_greedy(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.set_delay_eval(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.start();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_0<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_0<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>engine.find_solution(<sp/>cost,<sp/>plan<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plan.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>anytime<sp/>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>plan.size();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>k+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>&amp;<sp/>a<sp/>=<sp/>*(search_prob.task().actions()[<sp/>plan[k]<sp/>]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>a.signature();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/>a.signature()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>plan<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_f<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_f<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime){</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>tf;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_0<sp/>=<sp/>expanded_f;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_0<sp/>=<sp/>generated_f;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.clear();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!anytime)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>aptk::time_used()<sp/>-<sp/>ref;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>generated<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>expanded<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.expanded()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>pruned<sp/>by<sp/>bound:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.pruned_by_bound()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead-end<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.dead_ends()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_time;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS_H_Add</ref><sp/>engine(<sp/>search_prob<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.start();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_0<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_0<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>engine.find_solution(<sp/>cost,<sp/>plan<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plan.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>anytime<sp/>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>plan.size();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>k+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>&amp;<sp/>a<sp/>=<sp/>*(search_prob.task().actions()[<sp/>plan[k]<sp/>]);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>a.signature();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/>a.signature()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>plan<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_f<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_f<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>tf;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_0<sp/>=<sp/>expanded_f;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_0<sp/>=<sp/>generated_f;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.clear();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!anytime)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>aptk::time_used()<sp/>-<sp/>ref;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>generated<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>expanded<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.expanded()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>pruned<sp/>by<sp/>bound:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.pruned_by_bound()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead-end<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.dead_ends()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_time;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS_H_Max</ref><sp/>engine(<sp/>search_prob<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.start();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_0<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_0<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>engine.find_solution(<sp/>cost,<sp/>plan<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plan.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>anytime<sp/>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>plan.size();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>k+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>&amp;<sp/>a<sp/>=<sp/>*(search_prob.task().actions()[<sp/>plan[k]<sp/>]);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>a.signature();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/>a.signature()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>plan<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_f<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_f<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime){</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>tf;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_0<sp/>=<sp/>expanded_f;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_0<sp/>=<sp/>generated_f;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.clear();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!anytime)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>aptk::time_used()<sp/>-<sp/>ref;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>generated<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>expanded<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.expanded()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>pruned<sp/>by<sp/>bound:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.pruned_by_bound()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead-end<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.dead_ends()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_time;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1search_1_1FF__GBFS" kindref="compound">FF_GBFS_Classic_H_Max</ref><sp/>engine(<sp/>search_prob<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.start();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_0<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_0<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>engine.find_solution(<sp/>cost,<sp/>plan<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!plan.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>anytime<sp/>)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Plan<sp/>found<sp/>with<sp/>cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>plan.size();<sp/>k++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>k+1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classaptk_1_1Action" kindref="compound">aptk::Action</ref>&amp;<sp/>a<sp/>=<sp/>*(search_prob.task().actions()[<sp/>plan[k]<sp/>]);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>a.signature();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/>a.signature()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>plan<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tf<sp/>=<sp/>aptk::time_used();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>expanded_f<sp/>=<sp/>engine.expanded();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>generated_f<sp/>=<sp/>engine.generated();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(anytime){</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tf<sp/>-<sp/>t0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Generated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>generated_f<sp/>-<sp/>generated_0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expanded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expanded_f<sp/>-<sp/>expanded_0<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>tf;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_0<sp/>=<sp/>expanded_f;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated_0<sp/>=<sp/>generated_f;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.clear();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!anytime)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>total_time<sp/>=<sp/>aptk::time_used()<sp/>-<sp/>ref;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>generated<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.generated()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>expanded<sp/>during<sp/>search:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.expanded()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Nodes<sp/>pruned<sp/>by<sp/>bound:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.pruned_by_bound()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Dead-end<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>engine.dead_ends()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_time;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_no_solution(<sp/>std::string<sp/>reason,<sp/>std::string<sp/>plan_filename<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>plan_stream(<sp/>plan_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;;<sp/>No<sp/>solution<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>plan_stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reason<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>plan_stream.close();</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_command_line_options(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ac,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>av,<sp/>po::variables_map&amp;<sp/>vars<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>po::options_description<sp/>desc(<sp/></highlight><highlight class="stringliteral">&quot;Options:&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.add_options()</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Show<sp/>help<sp/>message&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;domain&quot;</highlight><highlight class="normal">,<sp/>po::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>PDDL<sp/>domain<sp/>description&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;problem&quot;</highlight><highlight class="normal">,<sp/>po::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>PDDL<sp/>problem<sp/>description&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;heuristic&quot;</highlight><highlight class="normal">,<sp/>po::value&lt;int&gt;()-&gt;default_value(1),<sp/></highlight><highlight class="stringliteral">&quot;1:<sp/>H_add<sp/>(default<sp/>1)\n2:<sp/>H_add_Rp\n3:<sp/>H_max_Rp\n4:<sp/>H_add_FF_Rp\n5:<sp/>H_max_FF_Rp\n6:<sp/>H_layered_FF_Rp<sp/>(<sp/>FF_*,<sp/>as<sp/>in<sp/>Journal<sp/>Paper)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;anytime&quot;</highlight><highlight class="normal">,<sp/>po::value&lt;bool&gt;()-&gt;default_value(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Anytime<sp/>(default<sp/>False)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">,<sp/>po::value&lt;std::string&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>file<sp/>for<sp/>plan&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>po::store(<sp/>po::parse_command_line(<sp/>ac,<sp/>av,<sp/>desc<sp/>),<sp/>vars<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>po::notify(<sp/>vars<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>std::exception&amp;<sp/>e<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exception<sp/>of<sp/>unknown<sp/>type!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(1);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vars.count(</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>desc<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>po::variables_map<sp/>vm;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>process_command_line_options(<sp/>argc,<sp/>argv,<sp/>vm<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vm.count(<sp/></highlight><highlight class="stringliteral">&quot;domain&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>PDDL<sp/>domain<sp/>was<sp/>specified!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vm.count(<sp/></highlight><highlight class="stringliteral">&quot;problem&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>PDDL<sp/>problem<sp/>was<sp/>specified!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(1);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>plan_filename;<sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vm.count(<sp/></highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>output<sp/>plan<sp/>file<sp/>specified,<sp/>defaulting<sp/>to<sp/>&apos;plan.ipc&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;plan.ipc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan_filename<sp/>=<sp/>vm[</highlight><highlight class="stringliteral">&quot;output&quot;</highlight><highlight class="normal">].as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heuristic<sp/>=<sp/>vm[</highlight><highlight class="stringliteral">&quot;heuristic&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anytime<sp/>=<sp/>vm[</highlight><highlight class="stringliteral">&quot;anytime&quot;</highlight><highlight class="normal">].as&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>details(<sp/></highlight><highlight class="stringliteral">&quot;execution.details&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref><sp/><sp/>prob;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>aptk::FF_Parser::get_problem_description(<sp/>vm[</highlight><highlight class="stringliteral">&quot;domain&quot;</highlight><highlight class="normal">].as&lt;std::string&gt;(),<sp/>vm[</highlight><highlight class="stringliteral">&quot;problem&quot;</highlight><highlight class="normal">].as&lt;std::string&gt;(),<sp/>prob<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PDDL<sp/>problem<sp/>description<sp/>loaded:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tHeuristic:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(heuristic<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>H_add:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(heuristic<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>H_add_Rp:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>3<sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>H_max_Rp:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(heuristic<sp/>==<sp/>4<sp/>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>FF&apos;s<sp/>GBFS<sp/>with<sp/>H_add_rp:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>5<sp/>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>FF&apos;s<sp/>GBFS<sp/>with<sp/>H_max_rp:<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tDomain:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prob.domain_name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tProblem:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prob.problem_name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t#Actions:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prob.num_actions()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t#Fluents:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prob.num_fluents()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classaptk_1_1agnostic_1_1Fwd__Search__Problem" kindref="compound">Fwd_Search_Problem</ref><sp/><sp/>search_prob(<sp/>&amp;prob<sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>at_search_t<sp/>=<sp/>do_search(search_prob,<sp/>cost,<sp/>details,<sp/>plan_filename,<sp/>heuristic,<sp/>anytime<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>heuristic<sp/>==<sp/>1<sp/>){</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>First<sp/>H_add<sp/>search<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>First<sp/>H_add<sp/>search<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>First<sp/>H_add_RP<sp/>search<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>First<sp/>H_add_RP<sp/>search<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>First<sp/>H_max_RP<sp/>search<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Best<sp/>First<sp/>H_max_RP<sp/>search<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>4<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FF&apos;s<sp/>Greedy<sp/>Best<sp/>First<sp/>search<sp/>with<sp/>H_add_RP<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FF&apos;s<sp/>Greedy<sp/>Best<sp/>First<sp/>search<sp/>with<sp/>H_add_RP<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>heuristic<sp/>==<sp/>5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FF&apos;s<sp/>Greedy<sp/>Best<sp/>First<sp/>search<sp/>with<sp/>H_max_RP<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FF&apos;s<sp/>Greedy<sp/>Best<sp/>First<sp/>search<sp/>with<sp/>H_max_RP<sp/>completed<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>at_search_t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secs,<sp/>found<sp/>plan<sp/>cost<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>details.close();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/generic-best_first-ffparser/main.cxx"/>
  </compounddef>
</doxygen>
