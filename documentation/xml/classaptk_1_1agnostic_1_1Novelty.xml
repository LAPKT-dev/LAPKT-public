<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classaptk_1_1agnostic_1_1Novelty" kind="class" language="C++" prot="public">
    <compoundname>aptk::agnostic::Novelty</compoundname>
    <basecompoundref refid="classaptk_1_1Heuristic" prot="public" virt="non-virtual">aptk::Heuristic&lt; State &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Search_Model</type>
      </param>
      <param>
        <type>typename <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1a2352138a576ac62b10f874f7b98b48f1" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref> &amp;</type>
        <definition>const STRIPS_Problem&amp; aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_strips_model</definition>
        <argsstring></argsstring>
        <name>m_strips_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="430" column="27" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1a232981da9023f19a177853920e6c18f8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> * &gt;</type>
        <definition>std::vector&lt;Search_Node*&gt; aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_nodes_tuples</definition>
        <argsstring></argsstring>
        <name>m_nodes_tuples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="431" column="25" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1a2eb17a586fc16b7c178b4fa9bacf2513" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_arity</definition>
        <argsstring></argsstring>
        <name>m_arity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="432" column="39" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1a2af406487ebd910b2f830f85376350ff" prot="protected" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_num_tuples</definition>
        <argsstring></argsstring>
        <name>m_num_tuples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="433" column="31" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1aea7855e126577232c9d5eaa60e712f63" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_num_fluents</definition>
        <argsstring></argsstring>
        <name>m_num_fluents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="434" column="31" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1a91d6b99d130ba2c531715ec9d0a14fa4" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_max_memory_size_MB</definition>
        <argsstring></argsstring>
        <name>m_max_memory_size_MB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="435" column="31" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Novelty_1ac5c2ad532a71f47d1ffba1713d4585eb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="436" column="11" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a713f9d0fc721e7300a784ac0e9e3be48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::Novelty</definition>
        <argsstring>(const Search_Model &amp;prob, unsigned max_arity=1, const unsigned max_MB=2048)</argsstring>
        <name>Novelty</name>
        <param>
          <type>const Search_Model &amp;</type>
          <declname>prob</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_arity</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>max_MB</declname>
          <defval>2048</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="41" column="1" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1aabe0b7709dba09a83011340c05e7045c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::set_verbose</definition>
        <argsstring>(bool v)</argsstring>
        <name>set_verbose</name>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="48" column="5" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1aa55d653725f2efa755cce16e266981b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::~Novelty</definition>
        <argsstring>()</argsstring>
        <name>~Novelty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="50" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1aa7f6ab0b38ab0c853056a2f5b5275dd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <reimplements refid="classaptk_1_1Heuristic_1a13825fc30fc7f2d3f4ba5da0b4ee32f7">init</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="54" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1ad3fe04e9d7863ac8d5d9d555203abb1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::arity</definition>
        <argsstring>() const</argsstring>
        <name>arity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="62" column="10" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a753b3c58313cb7e91f89fc34f21bfa55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::set_arity</definition>
        <argsstring>(unsigned max_arity)</argsstring>
        <name>set_arity</name>
        <param>
          <type>unsigned</type>
          <declname>max_arity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="64" column="10" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="64" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a44054e660d9e9fccb1c495e9e99dd15d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::eval</definition>
        <argsstring>(Search_Node *n, float &amp;h_val)</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="88" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a9e61d758fc6b504a6248e0008bfee2f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::eval</definition>
        <argsstring>(Search_Node *n, float &amp;h_val, std::vector&lt; Action_Idx &gt; &amp;pref_ops)</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <param>
          <type>std::vector&lt; Action_Idx &gt; &amp;</type>
          <declname>pref_ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="93" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1ad7efb0ae71b1dae4ebb7553fe3d7ebfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::eval</definition>
        <argsstring>(const State &amp;s, float &amp;h_val)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="98" column="14" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a11682036a591c36edeb1d0cc3b123f10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::eval</definition>
        <argsstring>(const State &amp;s, float &amp;h_val, std::vector&lt; Action_Idx &gt; &amp;pref_ops)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <param>
          <type>std::vector&lt; Action_Idx &gt; &amp;</type>
          <declname>pref_ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="102" column="14" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1ad858d20d402b76519ecad4c2eb3b1c76" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::compute</definition>
        <argsstring>(Search_Node *n, float &amp;novelty)</argsstring>
        <name>compute</name>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>novelty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If can use add(op), the computation is F^i-1 aprox. FASTER!!! if action == no_op (i.e. start action), the computation is F^i, SLOWER!! where i ranges over 1 to max_arity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="117" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="117" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1aa37f0cdfdea73f4af665d33a77b96bc7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::cover_tuples_op</definition>
        <argsstring>(Search_Node *n, unsigned arity)</argsstring>
        <name>cover_tuples_op</name>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instead of checking the whole state, checks the new atoms permutations only! </para>
        </detaileddescription>
        <inbodydescription>
<para>get tuples from indexes</para>
<para>Check if tuple is covered</para>
<para>get tuples from indexes</para>
<para>new_tuple if -&gt; none was registered OR -&gt; n better than old_n</para>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="143" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="143" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a802943328adba90f7802c8e26e8f3730" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::cover_tuples</definition>
        <argsstring>(Search_Node *n, unsigned arity)</argsstring>
        <name>cover_tuples</name>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>get tuples from indexes</para>
<para>Check if tuple is covered</para>
<para>new_tuple if -&gt; none was registered OR -&gt; n better than old_n</para>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="294" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="294" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a45ff5606d68a44656e2bdf05d0f6c72a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::tuple2idx_size2</definition>
        <argsstring>(std::vector&lt; unsigned &gt; &amp;indexes, unsigned arity) const</argsstring>
        <name>tuple2idx_size2</name>
        <param>
          <type>std::vector&lt; unsigned &gt; &amp;</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="374" column="18" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="374" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a77bc620a0f11714bf70f08b93ee76281" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::tuple2idx</definition>
        <argsstring>(std::vector&lt; unsigned &gt; &amp;indexes, unsigned arity) const</argsstring>
        <name>tuple2idx</name>
        <param>
          <type>std::vector&lt; unsigned &gt; &amp;</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="383" column="18" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="383" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1a73775e646c3daf9f9e2c90f428f70994" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::idx2tuple</definition>
        <argsstring>(std::vector&lt; unsigned &gt; &amp;tuple, Fluent_Vec &amp;fl, unsigned idx, unsigned arity) const</argsstring>
        <name>idx2tuple</name>
        <param>
          <type>std::vector&lt; unsigned &gt; &amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type>Fluent_Vec &amp;</type>
          <declname>fl</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>arity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="398" column="18" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="398" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Novelty_1af2fb6aadd1788938f45862ab22fe7618" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;::is_better</definition>
        <argsstring>(Search_Node *n, Search_Node *new_n) const</argsstring>
        <name>is_better</name>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>new_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="424" column="18" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="424" bodyend="427"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;</label>
        <link refid="classaptk_1_1agnostic_1_1Novelty"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>aptk::Heuristic&lt; State &gt;</label>
        <link refid="classaptk_1_1Heuristic"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>aptk::STRIPS_Problem</label>
        <link refid="classaptk_1_1STRIPS__Problem"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_succ_gen</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_succ_gen_v3</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_mutexes</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_succ_gen_v2</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>aptk::agnostic::Match_Tree</label>
        <link refid="classaptk_1_1agnostic_1_1Match__Tree"/>
      </node>
      <node id="1">
        <label>aptk::agnostic::Novelty&lt; Search_Model, Search_Node &gt;</label>
        <link refid="classaptk_1_1agnostic_1_1Novelty"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_strips_model</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>aptk::Heuristic&lt; State &gt;</label>
        <link refid="classaptk_1_1Heuristic"/>
      </node>
      <node id="5">
        <label>aptk::WatchedLitSuccGen</label>
        <link refid="classaptk_1_1WatchedLitSuccGen"/>
      </node>
      <node id="6">
        <label>aptk::agnostic::Mutex_Set</label>
        <link refid="classaptk_1_1agnostic_1_1Mutex__Set"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_model</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>aptk::agnostic::Successor_Generator</label>
        <link refid="classaptk_1_1agnostic_1_1Successor__Generator"/>
      </node>
    </collaborationgraph>
    <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" line="38" column="1" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/novelty.hxx" bodystart="38" bodyend="437"/>
    <listofallmembers>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1ad3fe04e9d7863ac8d5d9d555203abb1e" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>arity</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1ad858d20d402b76519ecad4c2eb3b1c76" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>compute</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a802943328adba90f7802c8e26e8f3730" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>cover_tuples</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1aa37f0cdfdea73f4af665d33a77b96bc7" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>cover_tuples_op</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a44054e660d9e9fccb1c495e9e99dd15d" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a9e61d758fc6b504a6248e0008bfee2f3" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1ad7efb0ae71b1dae4ebb7553fe3d7ebfa" prot="public" virt="virtual"><scope>aptk::agnostic::Novelty</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a11682036a591c36edeb1d0cc3b123f10" prot="public" virt="virtual"><scope>aptk::agnostic::Novelty</scope><name>eval</name></member>
      <member refid="classaptk_1_1Heuristic_1a86eeb6445f46d830c14b319b7e5a2fda" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>Heuristic</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a73775e646c3daf9f9e2c90f428f70994" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>idx2tuple</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1aa7f6ab0b38ab0c853056a2f5b5275dd9" prot="public" virt="virtual"><scope>aptk::agnostic::Novelty</scope><name>init</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1af2fb6aadd1788938f45862ab22fe7618" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>is_better</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a2eb17a586fc16b7c178b4fa9bacf2513" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_arity</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a91d6b99d130ba2c531715ec9d0a14fa4" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_max_memory_size_MB</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a232981da9023f19a177853920e6c18f8" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_nodes_tuples</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1aea7855e126577232c9d5eaa60e712f63" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_num_fluents</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a2af406487ebd910b2f830f85376350ff" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_num_tuples</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a2352138a576ac62b10f874f7b98b48f1" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_strips_model</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1ac5c2ad532a71f47d1ffba1713d4585eb" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>m_verbose</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a713f9d0fc721e7300a784ac0e9e3be48" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>Novelty</name></member>
      <member refid="classaptk_1_1Heuristic_1a44636224e625098eafd41fe54990b9d1" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>problem</name></member>
      <member refid="classaptk_1_1Heuristic_1a95f567fe7f990819bfe72d08758b195e" prot="public" virt="virtual"><scope>aptk::agnostic::Novelty</scope><name>reset</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a753b3c58313cb7e91f89fc34f21bfa55" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>set_arity</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1aabe0b7709dba09a83011340c05e7045c" prot="public" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>set_verbose</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a77bc620a0f11714bf70f08b93ee76281" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>tuple2idx</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1a45ff5606d68a44656e2bdf05d0f6c72a" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Novelty</scope><name>tuple2idx_size2</name></member>
      <member refid="classaptk_1_1Heuristic_1a2b0f4d681e5a565be755a3d2a8c30608" prot="public" virt="virtual"><scope>aptk::agnostic::Novelty</scope><name>~Heuristic</name></member>
      <member refid="classaptk_1_1agnostic_1_1Novelty_1aa55d653725f2efa755cce16e266981b1" prot="public" virt="virtual"><scope>aptk::agnostic::Novelty</scope><name>~Novelty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
