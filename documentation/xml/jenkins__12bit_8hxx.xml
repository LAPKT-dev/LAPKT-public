<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="jenkins__12bit_8hxx" kind="file" language="C++">
    <compoundname>jenkins_12bit.hxx</compoundname>
    <includes local="no">cstdlib</includes>
    <includedby refid="hash__table_8hxx" local="no">/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/hash_table.hxx</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx</label>
        <link refid="jenkins__12bit_8hxx"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdlib</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="28">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/iw/iw_planner.hxx</label>
        <link refid="iw__planner_8hxx_source"/>
      </node>
      <node id="16">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/at_gbfs_3h.hxx</label>
        <link refid="at__gbfs__3h_8hxx_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/brfs/brfs_planner.hxx</label>
        <link refid="brfs__planner_8hxx_source"/>
      </node>
      <node id="19">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/bfws_2h.hxx</label>
        <link refid="bfws__2h_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/bfws/bfws.hxx</label>
        <link refid="bfws_8hxx_source"/>
      </node>
      <node id="2">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/hash_table.hxx</label>
        <link refid="hash__table_8hxx_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/siw/siw_planner.hxx</label>
        <link refid="siw__planner_8hxx_source"/>
      </node>
      <node id="11">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/at_rwbfs_dq_mh.hxx</label>
        <link refid="at__rwbfs__dq__mh_8hxx_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/bfs_f/bfsf_planner.hxx</label>
        <link refid="bfsf__planner_8hxx_source"/>
      </node>
      <node id="9">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/siw_plus-then-bfs_f/siw_plus_bfs_f.hxx</label>
        <link refid="siw__plus__bfs__f_8hxx_source"/>
      </node>
      <node id="20">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/bfws_2h_consistency.hxx</label>
        <link refid="bfws__2h__consistency_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/anytime_lapkt/anytime_lapkt.hxx</label>
        <link refid="anytime__lapkt_8hxx_source"/>
      </node>
      <node id="3">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/novelty/node_novelty_spaces.hxx</label>
        <link refid="node__novelty__spaces_8hxx_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/bfws_2h_consistency_M.hxx</label>
        <link refid="bfws__2h__consistency__M_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/ff_ehc.hxx</label>
        <link refid="ff__ehc_8hxx_source"/>
      </node>
      <node id="29">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/siw.hxx</label>
        <link refid="siw_8hxx_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/ipc2014_rwa.hxx</label>
        <link refid="shared_2search_2ipc2014__rwa_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/anytime_lapkt/ipc2014_rwa.hxx</label>
        <link refid="planners_2anytime__lapkt_2ipc2014__rwa_8hxx_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx</label>
        <link refid="jenkins__12bit_8hxx"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/bfws_4h.hxx</label>
        <link refid="bfws__4h_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/bfws_2h_M.hxx</label>
        <link refid="bfws__2h__M_8hxx_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/siw_plus/siw_plus_planner.hxx</label>
        <link refid="siw__plus__planner_8hxx_source"/>
      </node>
      <node id="7">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/iw_plus/rp_iw_planner.hxx</label>
        <link refid="rp__iw__planner_8hxx_source"/>
      </node>
      <node id="27">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/delete-free-iw/dfiw_planner.hxx</label>
        <link refid="dfiw__planner_8hxx_source"/>
      </node>
      <node id="10">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/at_bfs_dq_mh.hxx</label>
        <link refid="at__bfs__dq__mh_8hxx_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/iw.hxx</label>
        <link refid="iw_8hxx_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/brfs.hxx</label>
        <link refid="brfs_8hxx_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/dfs_plus/dfs_plus_planner.hxx</label>
        <link refid="dfs__plus__planner_8hxx_source"/>
      </node>
      <node id="30">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/delete-free-siw/dfsiw_planner.hxx</label>
        <link refid="dfsiw__planner_8hxx_source"/>
      </node>
      <node id="17">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/planners/at_bfs_f/at_bfsf_planner.hxx</label>
        <link refid="at__bfsf__planner_8hxx_source"/>
      </node>
      <node id="4">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/rp_iw.hxx</label>
        <link refid="rp__iw_8hxx_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/legacy_ff/at_bfs_f-ffparser/ipc2014_rwa.hxx</label>
        <link refid="legacy__ff_2at__bfs__f-ffparser_2ipc2014__rwa_8hxx_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classJenkins__Hash__Function" prot="public">Jenkins_Hash_Function</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="jenkins__12bit_8hxx_1a5228a36027b972b0fe179089990d50c8" prot="public" static="no">
        <name>jenkins_hashsize</name>
        <param><defname>n</defname></param>
        <initializer>((ub4)1&lt;&lt;(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" line="9" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jenkins__12bit_8hxx_1a0e35e8c55681acfaf1a4d44d40da0b04" prot="public" static="no">
        <name>jenkins_hashmask</name>
        <param><defname>n</defname></param>
        <initializer>(jenkins_hashsize(n)-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" line="10" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jenkins__12bit_8hxx_1a70bd12a278a8ad883ea428ca41ba2f70" prot="public" static="no">
        <name>jenkins_mix</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>{ \
  a -= b; a -= c; a ^= (c&gt;&gt;13); \
  b -= c; b -= a; b ^= (a&lt;&lt;8); \
  c -= a; c -= b; c ^= (b&gt;&gt;13); \
  a -= b; a -= c; a ^= (c&gt;&gt;12);  \
  b -= c; b -= a; b ^= (a&lt;&lt;16); \
  c -= a; c -= b; c ^= (b&gt;&gt;5); \
  a -= b; a -= c; a ^= (c&gt;&gt;3);  \
  b -= c; b -= a; b ^= (a&lt;&lt;10); \
  c -= a; c -= b; c ^= (b&gt;&gt;15); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" line="38" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jenkins__12bit_8hxx_1a3fece3757bfd6deee681fb0d1fd41f97" prot="public" static="no">
        <type>unsigned long int</type>
        <definition>typedef unsigned long int ub4</definition>
        <argsstring></argsstring>
        <name>ub4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" line="6" column="30" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="jenkins__12bit_8hxx_1a5e0e444ca36facaa313c7f26758b6dd0" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char ub1</definition>
        <argsstring></argsstring>
        <name>ub1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" line="7" column="30" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jenkins__12bit_8hxx_1a8bf7fedb34d7ac253c6bb4cedb93beb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ub4</type>
        <definition>ub4 jenkins_hash</definition>
        <argsstring>(ub1 *k, ub4 length, ub4 initval)</argsstring>
        <name>jenkins_hash</name>
        <param>
          <type>ub1 *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>ub4</type>
          <declname>length</declname>
        </param>
        <param>
          <type>ub4</type>
          <declname>initval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" line="79" column="12" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx" bodystart="79" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__JENKINS_12_BYTE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__JENKINS_12_BYTE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ub4;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unsigned<sp/>4-byte<sp/>quantities<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ub1;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unsigned<sp/>1-byte<sp/>quantities<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>jenkins_hashsize(n)<sp/>((ub4)1&lt;&lt;(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>jenkins_hashmask(n)<sp/>(jenkins_hashsize(n)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="13"><highlight class="comment">--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="14"><highlight class="comment">mix<sp/>--<sp/>mix<sp/>3<sp/>32-bit<sp/>values<sp/>reversibly.</highlight></codeline>
<codeline lineno="15"><highlight class="comment">For<sp/>every<sp/>delta<sp/>with<sp/>one<sp/>or<sp/>two<sp/>bits<sp/>set,<sp/>and<sp/>the<sp/>deltas<sp/>of<sp/>all<sp/>three</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>high<sp/>bits<sp/>or<sp/>all<sp/>three<sp/>low<sp/>bits,<sp/>whether<sp/>the<sp/>original<sp/>value<sp/>of<sp/>a,b,c</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>is<sp/>almost<sp/>all<sp/>zero<sp/>or<sp/>is<sp/>uniformly<sp/>distributed,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>If<sp/>mix()<sp/>is<sp/>run<sp/>forward<sp/>or<sp/>backward,<sp/>at<sp/>least<sp/>32<sp/>bits<sp/>in<sp/>a,b,c</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>have<sp/>at<sp/>least<sp/>1/4<sp/>probability<sp/>of<sp/>changing.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>If<sp/>mix()<sp/>is<sp/>run<sp/>forward,<sp/>every<sp/>bit<sp/>of<sp/>c<sp/>will<sp/>change<sp/>between<sp/>1/3<sp/>and</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>2/3<sp/>of<sp/>the<sp/>time.<sp/><sp/>(Well,<sp/>22/100<sp/>and<sp/>78/100<sp/>for<sp/>some<sp/>2-bit<sp/>deltas.)</highlight></codeline>
<codeline lineno="22"><highlight class="comment">mix()<sp/>was<sp/>built<sp/>out<sp/>of<sp/>36<sp/>single-cycle<sp/>latency<sp/>instructions<sp/>in<sp/>a<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>structure<sp/>that<sp/>could<sp/>supported<sp/>2x<sp/>parallelism,<sp/>like<sp/>so:</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>b;<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>c;<sp/>x<sp/>=<sp/>(c&gt;&gt;13);</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>-=<sp/>c;<sp/>a<sp/>^=<sp/>x;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>-=<sp/>a;<sp/>x<sp/>=<sp/>(a&lt;&lt;8);</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>a;<sp/>b<sp/>^=<sp/>x;</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>b;<sp/>x<sp/>=<sp/>(b&gt;&gt;13);</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>Unfortunately,<sp/>superscalar<sp/>Pentiums<sp/>and<sp/>Sparcs<sp/>can&apos;t<sp/>take<sp/>advantage<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>of<sp/>that<sp/>parallelism.<sp/><sp/>They&apos;ve<sp/>also<sp/>turned<sp/>some<sp/>of<sp/>those<sp/>single-cycle</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>latency<sp/>instructions<sp/>into<sp/>multi-cycle<sp/>latency<sp/>instructions.<sp/><sp/>Still,</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>this<sp/>is<sp/>the<sp/>fastest<sp/>good<sp/>hash<sp/>I<sp/>could<sp/>find.<sp/><sp/>There<sp/>were<sp/>about<sp/>2^^68</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>to<sp/>choose<sp/>from.<sp/><sp/>I<sp/>only<sp/>looked<sp/>at<sp/>a<sp/>billion<sp/>or<sp/>so.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="37"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>jenkins_mix(a,b,c)<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/>a<sp/>-=<sp/>b;<sp/>a<sp/>-=<sp/>c;<sp/>a<sp/>^=<sp/>(c&gt;&gt;13);<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/>b<sp/>-=<sp/>c;<sp/>b<sp/>-=<sp/>a;<sp/>b<sp/>^=<sp/>(a&lt;&lt;8);<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/>c<sp/>-=<sp/>a;<sp/>c<sp/>-=<sp/>b;<sp/>c<sp/>^=<sp/>(b&gt;&gt;13);<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/>a<sp/>-=<sp/>b;<sp/>a<sp/>-=<sp/>c;<sp/>a<sp/>^=<sp/>(c&gt;&gt;12);<sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>b<sp/>-=<sp/>c;<sp/>b<sp/>-=<sp/>a;<sp/>b<sp/>^=<sp/>(a&lt;&lt;16);<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/>c<sp/>-=<sp/>a;<sp/>c<sp/>-=<sp/>b;<sp/>c<sp/>^=<sp/>(b&gt;&gt;5);<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/>a<sp/>-=<sp/>b;<sp/>a<sp/>-=<sp/>c;<sp/>a<sp/>^=<sp/>(c&gt;&gt;3);<sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/>b<sp/>-=<sp/>c;<sp/>b<sp/>-=<sp/>a;<sp/>b<sp/>^=<sp/>(a&lt;&lt;10);<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>c<sp/>-=<sp/>a;<sp/>c<sp/>-=<sp/>b;<sp/>c<sp/>^=<sp/>(b&gt;&gt;15);<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment">--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="53"><highlight class="comment">hash()<sp/>--<sp/>hash<sp/>a<sp/>variable-length<sp/>key<sp/>into<sp/>a<sp/>32-bit<sp/>value</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>k<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>key<sp/>(the<sp/>unaligned<sp/>variable-length<sp/>array<sp/>of<sp/>bytes)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>len<sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>length<sp/>of<sp/>the<sp/>key,<sp/>counting<sp/>by<sp/>bytes</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>initval<sp/>:<sp/>can<sp/>be<sp/>any<sp/>4-byte<sp/>value</highlight></codeline>
<codeline lineno="57"><highlight class="comment">Returns<sp/>a<sp/>32-bit<sp/>value.<sp/><sp/>Every<sp/>bit<sp/>of<sp/>the<sp/>key<sp/>affects<sp/>every<sp/>bit<sp/>of</highlight></codeline>
<codeline lineno="58"><highlight class="comment">the<sp/>return<sp/>value.<sp/><sp/>Every<sp/>1-bit<sp/>and<sp/>2-bit<sp/>delta<sp/>achieves<sp/>avalanche.</highlight></codeline>
<codeline lineno="59"><highlight class="comment">About<sp/>6*len+35<sp/>instructions.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">The<sp/>best<sp/>hash<sp/>table<sp/>sizes<sp/>are<sp/>powers<sp/>of<sp/>2.<sp/><sp/>There<sp/>is<sp/>no<sp/>need<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="62"><highlight class="comment">mod<sp/>a<sp/>prime<sp/>(mod<sp/>is<sp/>sooo<sp/>slow!).<sp/><sp/>If<sp/>you<sp/>need<sp/>less<sp/>than<sp/>32<sp/>bits,</highlight></codeline>
<codeline lineno="63"><highlight class="comment">use<sp/>a<sp/>bitmask.<sp/><sp/>For<sp/>example,<sp/>if<sp/>you<sp/>need<sp/>only<sp/>10<sp/>bits,<sp/>do</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>h<sp/>=<sp/>(h<sp/>&amp;<sp/>hashmask(10));</highlight></codeline>
<codeline lineno="65"><highlight class="comment">In<sp/>which<sp/>case,<sp/>the<sp/>hash<sp/>table<sp/>should<sp/>have<sp/>hashsize(10)<sp/>elements.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">If<sp/>you<sp/>are<sp/>hashing<sp/>n<sp/>strings<sp/>(ub1<sp/>**)k,<sp/>do<sp/>it<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>for<sp/>(i=0,<sp/>h=0;<sp/>i&lt;n;<sp/>++i)<sp/>h<sp/>=<sp/>hash(<sp/>k[i],<sp/>len[i],<sp/>h);</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">By<sp/>Bob<sp/>Jenkins,<sp/>1996.<sp/><sp/>bob_jenkins@burtleburtle.net.<sp/><sp/>You<sp/>may<sp/>use<sp/>this</highlight></codeline>
<codeline lineno="71"><highlight class="comment">code<sp/>any<sp/>way<sp/>you<sp/>wish,<sp/>private,<sp/>educational,<sp/>or<sp/>commercial.<sp/><sp/>It&apos;s<sp/>free.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">See<sp/>http://burtleburtle.net/bob/hash/evahash.html</highlight></codeline>
<codeline lineno="74"><highlight class="comment">Use<sp/>for<sp/>hash<sp/>table<sp/>lookup,<sp/>or<sp/>anything<sp/>where<sp/>one<sp/>collision<sp/>in<sp/>2^^32<sp/>is</highlight></codeline>
<codeline lineno="75"><highlight class="comment">acceptable.<sp/><sp/>Do<sp/>NOT<sp/>use<sp/>for<sp/>cryptographic<sp/>purposes.</highlight></codeline>
<codeline lineno="76"><highlight class="comment">--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="77"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ub4<sp/>jenkins_hash(<sp/>ub1*<sp/>k,<sp/>ub4<sp/>length,<sp/>ub4<sp/>initval)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*k<sp/>-<sp/>the<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*lenth<sp/>-<sp/>the<sp/>length<sp/>of<sp/>the<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*initval<sp/>-<sp/>the<sp/>previous<sp/>hash,<sp/>or<sp/>an<sp/>arbitrary<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>ub4<sp/>a,b,c,len;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>internal<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>b<sp/>=<sp/>0x9e3779b9;<sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>golden<sp/>ratio;<sp/>an<sp/>arbitrary<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>initval;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>previous<sp/>hash<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*----------------------------------------<sp/>handle<sp/>most<sp/>of<sp/>the<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>12)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>(k[0]<sp/>+((ub4)k[1]&lt;&lt;8)<sp/>+((ub4)k[2]&lt;&lt;16)<sp/>+((ub4)k[3]&lt;&lt;24));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>(k[4]<sp/>+((ub4)k[5]&lt;&lt;8)<sp/>+((ub4)k[6]&lt;&lt;16)<sp/>+((ub4)k[7]&lt;&lt;24));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>(k[8]<sp/>+((ub4)k[9]&lt;&lt;8)<sp/>+((ub4)k[10]&lt;&lt;16)+((ub4)k[11]&lt;&lt;24));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jenkins_mix(a,b,c);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>12;<sp/>len<sp/>-=<sp/>12;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*-------------------------------------<sp/>handle<sp/>the<sp/>last<sp/>11<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>c<sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>all<sp/>the<sp/>case<sp/>statements<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:<sp/>c+=((ub4)k[10]&lt;&lt;24);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:<sp/>c+=((ub4)k[9]&lt;&lt;16);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9<sp/>:<sp/>c+=((ub4)k[8]&lt;&lt;8);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>first<sp/>byte<sp/>of<sp/>c<sp/>is<sp/>reserved<sp/>for<sp/>the<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8<sp/>:<sp/>b+=((ub4)k[7]&lt;&lt;24);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7<sp/>:<sp/>b+=((ub4)k[6]&lt;&lt;16);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6<sp/>:<sp/>b+=((ub4)k[5]&lt;&lt;8);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5<sp/>:<sp/>b+=k[4];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4<sp/>:<sp/>a+=((ub4)k[3]&lt;&lt;24);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3<sp/>:<sp/>a+=((ub4)k[2]&lt;&lt;16);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/>:<sp/>a+=((ub4)k[1]&lt;&lt;8);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:<sp/>a+=k[0];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>0:<sp/>nothing<sp/>left<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>jenkins_mix(a,b,c);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*--------------------------------------------<sp/>report<sp/>the<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adaptor<sp/>for<sp/>jenkins<sp/>hash<sp/>for<sp/>use<sp/>with<sp/>types<sp/>which<sp/>can<sp/>be<sp/>casted<sp/>into<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>SGI<sp/>STL<sp/>Hash<sp/>Function<sp/>concept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="127" refid="classJenkins__Hash__Function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classJenkins__Hash__Function" kindref="compound">Jenkins_Hash_Function</ref></highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classJenkins__Hash__Function" kindref="compound">Jenkins_Hash_Function</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classJenkins__Hash__Function" kindref="compound">Jenkins_Hash_Function</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>obj<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>unsigned(obj);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jenkins_hash(<sp/>(ub1*)&amp;key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">),<sp/>2021980<sp/>);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>jenkins_12_byte.hxx</highlight></codeline>
    </programlisting>
    <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/utility/jenkins_12bit.hxx"/>
  </compounddef>
</doxygen>
