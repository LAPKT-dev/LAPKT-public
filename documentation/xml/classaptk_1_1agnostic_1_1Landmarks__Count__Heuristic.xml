<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic" kind="class" language="C++" prot="public">
    <compoundname>aptk::agnostic::Landmarks_Count_Heuristic</compoundname>
    <basecompoundref refid="classaptk_1_1Heuristic" prot="public" virt="non-virtual">aptk::Heuristic&lt; State &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Search_Model</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1acd943a3e250883b755fa30f14ade9bab" prot="public" static="no">
        <type><ref refid="classaptk_1_1agnostic_1_1Landmarks__Graph__Manager" kindref="compound">aptk::agnostic::Landmarks_Graph_Manager</ref>&lt; Search_Model &gt;</type>
        <definition>typedef aptk::agnostic::Landmarks_Graph_Manager&lt;Search_Model&gt; aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::Landmarks_Graph_Manager</definition>
        <argsstring></argsstring>
        <name>Landmarks_Graph_Manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="44" column="59" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a056c67aa3dc5a43bd55166e8c4169a4d" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref> &amp;</type>
        <definition>const STRIPS_Problem&amp; aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::m_strips_model</definition>
        <argsstring></argsstring>
        <name>m_strips_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="392" column="21" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ae8c8a6f9177e8679c451b1d012bb3643" prot="protected" static="no" mutable="no">
        <type><ref refid="classaptk_1_1agnostic_1_1Landmarks__Graph" kindref="compound">Landmarks_Graph</ref> *</type>
        <definition>Landmarks_Graph* aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::m_graph</definition>
        <argsstring></argsstring>
        <name>m_graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="393" column="16" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ad01d37c073e6461607d47696d7ac2eb8" prot="protected" static="no" mutable="no">
        <type><ref refid="classaptk_1_1agnostic_1_1Landmarks__Graph__Manager" kindref="compound">Landmarks_Graph_Manager</ref> *</type>
        <definition>Landmarks_Graph_Manager* aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::m_lgm</definition>
        <argsstring></argsstring>
        <name>m_lgm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="394" column="40" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a32ee3fd7f4a36ac90b7aacb0240c0f2b" prot="protected" static="no" mutable="no">
        <type><ref refid="classaptk_1_1Bit__Set" kindref="compound">Bit_Set</ref></type>
        <definition>Bit_Set aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::m_in_leafs</definition>
        <argsstring></argsstring>
        <name>m_in_leafs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="395" column="8" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ac5f25ec26ab4d63594828e98b9cde981" prot="protected" static="no" mutable="no">
        <type><ref refid="classaptk_1_1Bit__Set" kindref="compound">Bit_Set</ref></type>
        <definition>Bit_Set aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::m_already_counted</definition>
        <argsstring></argsstring>
        <name>m_already_counted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="396" column="8" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a441bb3c90c555e4171ddca5042bf1ba8" prot="protected" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::m_max_value</definition>
        <argsstring></argsstring>
        <name>m_max_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="397" column="41" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="397" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a2b3d5edbc4aac0b602268c50b5936b29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::Landmarks_Count_Heuristic</definition>
        <argsstring>(const Search_Model &amp;prob)</argsstring>
        <name>Landmarks_Count_Heuristic</name>
        <param>
          <type>const Search_Model &amp;</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="46" column="1" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a63229238b658e0bbe347292a0d31287f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::Landmarks_Count_Heuristic</definition>
        <argsstring>(const Search_Model &amp;prob, Landmarks_Graph *lg)</argsstring>
        <name>Landmarks_Count_Heuristic</name>
        <param>
          <type>const Search_Model &amp;</type>
          <declname>prob</declname>
        </param>
        <param>
          <type><ref refid="classaptk_1_1agnostic_1_1Landmarks__Graph" kindref="compound">Landmarks_Graph</ref> *</type>
          <declname>lg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="55" column="1" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a8aa8d2ca5eaba049c37de0c2d35f145e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::~Landmarks_Count_Heuristic</definition>
        <argsstring>()</argsstring>
        <name>~Landmarks_Count_Heuristic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="62" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a863f416d1e7bed527a7eadfcfbf7ebb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::set_graph</definition>
        <argsstring>(Landmarks_Graph *lg)</argsstring>
        <name>set_graph</name>
        <param>
          <type><ref refid="classaptk_1_1agnostic_1_1Landmarks__Graph" kindref="compound">Landmarks_Graph</ref> *</type>
          <declname>lg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="67" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a4859e28552e8abcc2f11b989f9c690ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::set_graph_manager</definition>
        <argsstring>(Landmarks_Graph_Manager *lg)</argsstring>
        <name>set_graph_manager</name>
        <param>
          <type><ref refid="classaptk_1_1agnostic_1_1Landmarks__Graph__Manager" kindref="compound">Landmarks_Graph_Manager</ref> *</type>
          <declname>lg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If manager is defined, landmark graph is recomputed at every node. If it&apos;s undefined, a land manager has to be used externally by the search algorithm to update the state of the graph before counting </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="74" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a211cb3bb4176f311428ac56208f726e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::update_graph</definition>
        <argsstring>(const Search_Node *n)</argsstring>
        <name>update_graph</name>
        <param>
          <type>const <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="80" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="80" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a9a21684168411e741b7728fdf57710cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval</definition>
        <argsstring>(const Search_Node *n, float &amp;h_val, std::vector&lt; Action_Idx &gt; &amp;pref_ops)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <param>
          <type>std::vector&lt; Action_Idx &gt; &amp;</type>
          <declname>pref_ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="109" column="14" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a1d0bbc8c46af0c9d5d135e94a6fc622d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval</definition>
        <argsstring>(const Search_Node *n, float &amp;h_val)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1search_1_1gbfs__3h_1_1Node" kindref="compound">Search_Node</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="119" column="14" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a78ff4b5d72660cdff9c3da3e2f48b13c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval</definition>
        <argsstring>(const State &amp;s, float &amp;h_val)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="127" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a97f8eff5b083c36eef4d613d8d0e3ccc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval</definition>
        <argsstring>(const State &amp;s, unsigned &amp;h_val)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unsigned &amp;</type>
          <declname>h_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="137" column="14" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="137" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ae6af8d3023abc1b7361c91822b13a94d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classaptk_1_1Heuristic" kindref="compound">Heuristic</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval_min</definition>
        <argsstring>(const State &amp;s, unsigned &amp;h_val, Heuristic *heur)</argsstring>
        <name>eval_min</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unsigned &amp;</type>
          <declname>h_val</declname>
        </param>
        <param>
          <type><ref refid="classaptk_1_1Heuristic" kindref="compound">Heuristic</ref> *</type>
          <declname>heur</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts lands </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="221" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="221" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a58876bc529be5766e25be57ae2c9e3c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval</definition>
        <argsstring>(const State &amp;s, float &amp;h_val, std::vector&lt; Action_Idx &gt; &amp;pref_ops)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>h_val</declname>
        </param>
        <param>
          <type>std::vector&lt; Action_Idx &gt; &amp;</type>
          <declname>pref_ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="258" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="258" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a8db52190a569dd176a3560950a6baefe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::eval</definition>
        <argsstring>(const State &amp;s, unsigned &amp;h_val, std::vector&lt; Action_Idx &gt; &amp;pref_ops)</argsstring>
        <name>eval</name>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unsigned &amp;</type>
          <declname>h_val</declname>
        </param>
        <param>
          <type>std::vector&lt; Action_Idx &gt; &amp;</type>
          <declname>pref_ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Graph should be updated already, otherwise use eval(Node,...). Counts edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="267" column="14" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="267" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ad07ea5b4eb6495f6acce5ba56292e574" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::max_value</definition>
        <argsstring>() const</argsstring>
        <name>max_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="364" column="10" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="364" bodyend="364"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a6c3bec44450e4ab3be35b6906d92771d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;::update_max_value</definition>
        <argsstring>()</argsstring>
        <name>update_max_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="367" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="367" bodyend="388"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>aptk::Heuristic&lt; State &gt;</label>
        <link refid="classaptk_1_1Heuristic"/>
      </node>
      <node id="1">
        <label>aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;</label>
        <link refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>aptk::STRIPS_Problem</label>
        <link refid="classaptk_1_1STRIPS__Problem"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_succ_gen</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_succ_gen_v3</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_mutexes</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_succ_gen_v2</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>aptk::agnostic::Landmarks_Graph</label>
        <link refid="classaptk_1_1agnostic_1_1Landmarks__Graph"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_strips_model</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_fl_in_graph</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>aptk::agnostic::Landmarks_Graph_Manager&lt; Search_Model &gt;</label>
        <link refid="classaptk_1_1agnostic_1_1Landmarks__Graph__Manager"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_graph</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_strips_model</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>aptk::agnostic::Match_Tree</label>
        <link refid="classaptk_1_1agnostic_1_1Match__Tree"/>
      </node>
      <node id="10">
        <label>aptk::Bit_Array</label>
        <link refid="classaptk_1_1Bit__Array"/>
      </node>
      <node id="9">
        <label>aptk::Bit_Set</label>
        <link refid="classaptk_1_1Bit__Set"/>
        <childnode refid="10" relation="usage">
          <edgelabel>m_fset</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>aptk::Heuristic&lt; State &gt;</label>
        <link refid="classaptk_1_1Heuristic"/>
      </node>
      <node id="6">
        <label>aptk::WatchedLitSuccGen</label>
        <link refid="classaptk_1_1WatchedLitSuccGen"/>
      </node>
      <node id="7">
        <label>aptk::agnostic::Mutex_Set</label>
        <link refid="classaptk_1_1agnostic_1_1Mutex__Set"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_model</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>aptk::agnostic::Successor_Generator</label>
        <link refid="classaptk_1_1agnostic_1_1Successor__Generator"/>
      </node>
      <node id="1">
        <label>aptk::agnostic::Landmarks_Count_Heuristic&lt; Search_Model &gt;</label>
        <link refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_graph</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_strips_model</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_lgm</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_already_counted</edgelabel>
          <edgelabel>m_in_leafs</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" line="42" column="1" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/compute/heuristic/landmark_count.hxx" bodystart="42" bodyend="398"/>
    <listofallmembers>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a9a21684168411e741b7728fdf57710cd" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a1d0bbc8c46af0c9d5d135e94a6fc622d" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a78ff4b5d72660cdff9c3da3e2f48b13c" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a97f8eff5b083c36eef4d613d8d0e3ccc" prot="public" virt="virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a58876bc529be5766e25be57ae2c9e3c6" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a8db52190a569dd176a3560950a6baefe" prot="public" virt="virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ae6af8d3023abc1b7361c91822b13a94d" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>eval_min</name></member>
      <member refid="classaptk_1_1Heuristic_1a86eeb6445f46d830c14b319b7e5a2fda" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>Heuristic</name></member>
      <member refid="classaptk_1_1Heuristic_1a13825fc30fc7f2d3f4ba5da0b4ee32f7" prot="public" virt="virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>init</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a2b3d5edbc4aac0b602268c50b5936b29" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>Landmarks_Count_Heuristic</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a63229238b658e0bbe347292a0d31287f" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>Landmarks_Count_Heuristic</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1acd943a3e250883b755fa30f14ade9bab" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>Landmarks_Graph_Manager</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ac5f25ec26ab4d63594828e98b9cde981" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>m_already_counted</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ae8c8a6f9177e8679c451b1d012bb3643" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>m_graph</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a32ee3fd7f4a36ac90b7aacb0240c0f2b" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>m_in_leafs</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ad01d37c073e6461607d47696d7ac2eb8" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>m_lgm</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a441bb3c90c555e4171ddca5042bf1ba8" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>m_max_value</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a056c67aa3dc5a43bd55166e8c4169a4d" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>m_strips_model</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1ad07ea5b4eb6495f6acce5ba56292e574" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>max_value</name></member>
      <member refid="classaptk_1_1Heuristic_1a44636224e625098eafd41fe54990b9d1" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>problem</name></member>
      <member refid="classaptk_1_1Heuristic_1a95f567fe7f990819bfe72d08758b195e" prot="public" virt="virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>reset</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a863f416d1e7bed527a7eadfcfbf7ebb6" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>set_graph</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a4859e28552e8abcc2f11b989f9c690ce" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>set_graph_manager</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a211cb3bb4176f311428ac56208f726e3" prot="public" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>update_graph</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a6c3bec44450e4ab3be35b6906d92771d" prot="protected" virt="non-virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>update_max_value</name></member>
      <member refid="classaptk_1_1Heuristic_1a2b0f4d681e5a565be755a3d2a8c30608" prot="public" virt="virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>~Heuristic</name></member>
      <member refid="classaptk_1_1agnostic_1_1Landmarks__Count__Heuristic_1a8aa8d2ca5eaba049c37de0c2d35f145e" prot="public" virt="virtual"><scope>aptk::agnostic::Landmarks_Count_Heuristic</scope><name>~Landmarks_Count_Heuristic</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
