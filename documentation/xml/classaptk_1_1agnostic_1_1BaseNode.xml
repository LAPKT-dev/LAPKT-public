<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classaptk_1_1agnostic_1_1BaseNode" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>aptk::agnostic::BaseNode</compoundname>
    <derivedcompoundref refid="classaptk_1_1agnostic_1_1EmptyNode" prot="public" virt="non-virtual">aptk::agnostic::EmptyNode</derivedcompoundref>
    <derivedcompoundref refid="classaptk_1_1agnostic_1_1LeafNode" prot="public" virt="non-virtual">aptk::agnostic::LeafNode</derivedcompoundref>
    <derivedcompoundref refid="classaptk_1_1agnostic_1_1SwitchNode" prot="public" virt="non-virtual">aptk::agnostic::SwitchNode</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1ab135d5770ad68a4e4ad009b32249be15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual aptk::agnostic::BaseNode::~BaseNode</definition>
        <argsstring>()</argsstring>
        <name>~BaseNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="43" column="9" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1acf202411cffa6dd9b52e34f6ec45cd78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void aptk::agnostic::BaseNode::dump</definition>
        <argsstring>(std::string indent, const STRIPS_Problem &amp;prob) const =0</argsstring>
        <name>dump</name>
        <reimplementedby refid="classaptk_1_1agnostic_1_1SwitchNode_1aac282f055cdc39f40867c7b170d57b66">dump</reimplementedby>
        <reimplementedby refid="classaptk_1_1agnostic_1_1LeafNode_1a2f0bca41e0bd521550a51dfa95ab4755">dump</reimplementedby>
        <reimplementedby refid="classaptk_1_1agnostic_1_1EmptyNode_1a0f0087069d78782e0445b8845e962b90">dump</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const <ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref> &amp;</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="44" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1a3195dbe8b83d90482c46be0fbd4c1f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void aptk::agnostic::BaseNode::generate_applicable_items</definition>
        <argsstring>(const State &amp;s, std::vector&lt; int &gt; &amp;actions)=0</argsstring>
        <name>generate_applicable_items</name>
        <reimplementedby refid="classaptk_1_1agnostic_1_1EmptyNode_1a3151fd2ca9acd60a030f8736d8b32bbc">generate_applicable_items</reimplementedby>
        <reimplementedby refid="classaptk_1_1agnostic_1_1SwitchNode_1ad0f189207afbf784b3dd3f70fd98b993">generate_applicable_items</reimplementedby>
        <reimplementedby refid="classaptk_1_1agnostic_1_1LeafNode_1a40cabfa3556f18ca9d0e330a6ca124b8">generate_applicable_items</reimplementedby>
        <param>
          <type>const <ref refid="classaptk_1_1State" kindref="compound">State</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>actions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="45" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1a780a2e37298e2203a2d25a51e3a6be8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int aptk::agnostic::BaseNode::count</definition>
        <argsstring>() const =0</argsstring>
        <name>count</name>
        <reimplementedby refid="classaptk_1_1agnostic_1_1SwitchNode_1ae660f51f4593ddc490aefad49f807291">count</reimplementedby>
        <reimplementedby refid="classaptk_1_1agnostic_1_1LeafNode_1a25a83c4bc1989d5f6ca00470cfebddde">count</reimplementedby>
        <reimplementedby refid="classaptk_1_1agnostic_1_1EmptyNode_1a4662c3ca0a811616d3af91d4040c81ce">count</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="46" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1a12561b504fa9ee56e2ddf261069546d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classaptk_1_1agnostic_1_1BaseNode" kindref="compound">BaseNode</ref> *</type>
        <definition>BaseNode * aptk::agnostic::BaseNode::create_tree</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;actions, std::vector&lt; bool &gt; &amp;vars_seen, const STRIPS_Problem &amp;prob)</argsstring>
        <name>create_tree</name>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>actions</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>vars_seen</declname>
        </param>
        <param>
          <type>const <ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref> &amp;</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="48" column="10" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.cxx" bodystart="49" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1a635b7ea3e4afd81bcf69c30fd14f6189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aptk::agnostic::BaseNode::get_best_var</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;actions, std::vector&lt; bool &gt; &amp;vars_seen, const STRIPS_Problem &amp;prob)</argsstring>
        <name>get_best_var</name>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>actions</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>vars_seen</declname>
        </param>
        <param>
          <type>const <ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref> &amp;</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="49" column="5" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.cxx" bodystart="70" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classaptk_1_1agnostic_1_1BaseNode_1add30cd61e4fd8744b532fca49265763c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool aptk::agnostic::BaseNode::action_done</definition>
        <argsstring>(int action_id, std::vector&lt; bool &gt; &amp;vars_seen, const STRIPS_Problem &amp;prob)</argsstring>
        <name>action_done</name>
        <param>
          <type>int</type>
          <declname>action_id</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>vars_seen</declname>
        </param>
        <param>
          <type>const <ref refid="classaptk_1_1STRIPS__Problem" kindref="compound">STRIPS_Problem</ref> &amp;</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="50" column="6" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.cxx" bodystart="94" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>aptk::agnostic::EmptyNode</label>
        <link refid="classaptk_1_1agnostic_1_1EmptyNode"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>aptk::agnostic::LeafNode</label>
        <link refid="classaptk_1_1agnostic_1_1LeafNode"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>aptk::agnostic::BaseNode</label>
        <link refid="classaptk_1_1agnostic_1_1BaseNode"/>
      </node>
      <node id="4">
        <label>aptk::agnostic::SwitchNode</label>
        <link refid="classaptk_1_1agnostic_1_1SwitchNode"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" line="41" column="1" bodyfile="/home/simhasama/Github/LAPKT_dev/LAPKT-public/src/shared/search/match_tree.hxx" bodystart="41" bodyend="51"/>
    <listofallmembers>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1add30cd61e4fd8744b532fca49265763c" prot="public" virt="non-virtual"><scope>aptk::agnostic::BaseNode</scope><name>action_done</name></member>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1a780a2e37298e2203a2d25a51e3a6be8a" prot="public" virt="pure-virtual"><scope>aptk::agnostic::BaseNode</scope><name>count</name></member>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1a12561b504fa9ee56e2ddf261069546d8" prot="public" virt="non-virtual"><scope>aptk::agnostic::BaseNode</scope><name>create_tree</name></member>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1acf202411cffa6dd9b52e34f6ec45cd78" prot="public" virt="pure-virtual"><scope>aptk::agnostic::BaseNode</scope><name>dump</name></member>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1a3195dbe8b83d90482c46be0fbd4c1f99" prot="public" virt="pure-virtual"><scope>aptk::agnostic::BaseNode</scope><name>generate_applicable_items</name></member>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1a635b7ea3e4afd81bcf69c30fd14f6189" prot="public" virt="non-virtual"><scope>aptk::agnostic::BaseNode</scope><name>get_best_var</name></member>
      <member refid="classaptk_1_1agnostic_1_1BaseNode_1ab135d5770ad68a4e4ad009b32249be15" prot="public" virt="virtual"><scope>aptk::agnostic::BaseNode</scope><name>~BaseNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
