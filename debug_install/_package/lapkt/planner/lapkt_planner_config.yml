# Planner Class Name
AT_LAPKT_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 1 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'
  max_novelty:  
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Max bound for novelty computation'
    var_name: 'max_novelty'

#END - Leave this line a empty line as it is
#Planner Class Name
AT_BFS_f_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 1 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'
  max_novelty:  
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Max bound for novelty computation'
    var_name: 'max_novelty'
#END - Leave this line a empty line as it is
#Planner Class Name
BFS_f_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  one_ha_per_fluent: 
    cmd_arg: 
      default : False
      required: False
      action  : 'store_true'
      help    : 'set one h.a per fluent to True'
    var_name: 'one_ha_per_fluent'
  max_novelty:  
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Max bound for novelty computation'
    var_name: 'max_novelty'

#END - Leave this line a empty line as it is
#Planner Class Name
BRFS_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'

#END - Leave this line a empty line as it is
#Planner Class Name
BFWS: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  search_type: 
    cmd_arg: 
      default: 'DUAL-BFWS' #
      required: False
      choices:
        - 'BFWS-f5-landmarks'
        - 'BFWS-goalcount-only'
        - 'BFWS-f5'
        - 'BFWS-f5-initstate-relevant'
        - 'k-BFWS'
        - 'k-M-BFWS'
        - 'k-M-C-BFWS'
        - 'k-C-BFWS'
        - '1-C-BFWS'
        - '1-BFWS'
        - 'POLY-BFWS'
        - 'DUAL-C-BFWS'
        - 'DUAL-BFWS'
      nargs   : '?'
      action  : 'store'
      help    : "specify a variant of BFWS - default 'DUAL-BFWS'"
    var_name: 'search'
  anytime: 
    cmd_arg: 
      default : False
      required: False
      action  : 'store_true'
      help    : 'enable anytime planning'
    var_name: 'anytime'
  max_novelty:  
    cmd_arg: 
      default: 2
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Max bound for novelty computation'
    var_name: 'max_novelty'
  m_value:  
    cmd_arg: 
      default: 32
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'For M-variants of BFWS, increases the number of expanded nodes by the constant factor.'
    var_name: 'm_value'
  verbose: 
    cmd_arg: 
      default : False
      required: False
      action  : 'store_true'
      help    : 'verbose standard output'
    var_name: 'verbose'
  run_id: 
    cmd_arg: 
      default : 0
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'a dummy id to differentiate between multiple runs of the same planner'

#END - Leave this line a empty line as it is
# Planner Class Name
DFIW_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 1 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'

#END - Leave this line a empty line as it is
# Planner Class Name
DFSIW_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 1 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'

#END - Leave this line a empty line as it is
# Planner Class Name
DFS_Plus_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'

#END - Leave this line a empty line as it is
# Planner Class Name
IW_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'
  atomic: 
    cmd_arg: 
      default : False
      required: False
      action  : 'store_true'
      help    : 'run iw over each atom in goal separately'
    var_name: 'atomic'


#END - Leave this line a empty line as it is
# Planner Class Name
RPIW_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'
  atomic: 
    cmd_arg: 
      default : False
      required: False
      action  : 'store_true'
      help    : 'run iw over each atom in goal separately'
    var_name: 'atomic'

#END - Leave this line a empty line as it is
# Planner Class Name
SIW_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'

#END - Leave this line a empty line as it is
# Planner Class Name
SIW_Plus_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'

#END - Leave this line a empty line as it is
# Planner Class Name
SIW_PLUS_BFS_F_Planner: 
  #Config parameters begin here
  #portfolio_planner is currently not implemented
  portfolio_planner: 
    help    : 'builds a portfolio portfolio planner based on config specs'
  argparse_module_path: 
    cmd_arg:  
      default : None #Leave empty if default lapkt_run.py module suffices
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'python module for parsing cmd args and running solver'
  # Use this as example config
  log_file: 
  # cmd_args will be loaded in ArgumentParser python module
    cmd_arg: 
      default : 'log' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'log file name'
    # 'var_name' is the name of interface (in boostpy_module.cxx) 
    #     via which a config value is stored into cpp variable.
    # 'fun_name' is the name of a setter (in boostpy_module.cxx) 
    #     which pushes exactly 1 (String/numeric) value.
    var_name: 'log_filename'   
  plan_file: 
    cmd_arg: 
      default: 'plan.ipc' #
      required: False
      nargs   : '?'
      action  : 'store'
      help    : 'file name where solution plan will be stored'
    var_name: 'plan_filename'
  iw_bound: 
    cmd_arg: 
      default: 1 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Bound for IW Algorithm'
    var_name: 'iw_bound'
  max_novelty:  
    cmd_arg: 
      default: 2 #
      required: False
      nargs   : '?'
      type    : 'int'
      action  : 'store'
      help    : 'Max bound for novelty computation'
    var_name: 'max_novelty'


#END - Leave this line a empty line as it is
