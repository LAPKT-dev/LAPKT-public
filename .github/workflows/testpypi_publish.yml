# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: TestPypiPublish

on:   
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

# --------------------------------------------------------------------------- #

  build-ubuntu-20:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        py_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}
    
    # - name: Install platform specific requirements
    #   run: |
    #     sudo apt-get install -y flex bison python3-dev python3 libfl-dev
      
    - name: Set up Python ${{ matrix.py_version }}
      uses: actions/setup-python@v2
      with:
        python-version: "${{ matrix.py_version }}"

    - name: Print GLIBC version
      run: ldd --version

    - name: Install pip dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest
        python3 -m pip install --upgrade build wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DUSE_SUPERBUILD=ON
        -DCMAKE_FF_CXX=OFF
        -DCMAKE_LEGACY_PLANNER=OFF
        -DCMAKE_FD=OFF
        -DCMAKE_TARSKI=ON
        -DCMAKE_DOXYGEN_DOCS=ON
        -DCMAKE_DOXYGEN_FLAT_THEME=ON
        -DCMAKE_DOXYGEN_AWESOME_THEME=ON
        -DCMAKE_SPHINX_DOCS=ON
        -DCMAKE_STATIC_BOOST=ON
        -DCMAKE_TESTING_ENABLED=ON
        -DPY_VERSION="${{ matrix.py_version }}"

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build

    - name: Install Python Package
      run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

    - name: CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest

    - uses: jungwinter/split@v2
      id: split
      with:
        msg: ${{ matrix.py_version }}
        separator: '.'

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
        python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=manylinux_2_31_x86_64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest

    - name: Store the binary wheel
      uses: actions/upload-artifact@v2
      with:
        name: python-package-distributions
        path: ${{github.workspace}}/${{env.BUILD_TYPE}}/_package/dist

# --------------------------------------------------------------------------- #

  build-ubuntu-18:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        py_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}
    
    # - name: Install platform specific requirements
    #   run: |
    #     sudo apt-get install -y flex bison python3-dev python3 libfl-dev
      
    - name: Set up Python ${{ matrix.py_version }}
      uses: actions/setup-python@v2
      with:
        python-version: "${{ matrix.py_version }}"

    - name: Print GLIBC version
      run: ldd --version

    - name: Install pip dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest
        python3 -m pip install --upgrade build wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DUSE_SUPERBUILD=ON
        -DCMAKE_FF_CXX=OFF
        -DCMAKE_LEGACY_PLANNER=OFF
        -DCMAKE_FD=OFF
        -DCMAKE_TARSKI=ON
        -DCMAKE_DOXYGEN_DOCS=OFF
        -DCMAKE_DOXYGEN_FLAT_THEME=OFF
        -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
        -DCMAKE_SPHINX_DOCS=OFF
        -DCMAKE_STATIC_BOOST=ON
        -DCMAKE_TESTING_ENABLED=ON
        -DPY_VERSION="${{ matrix.py_version }}"

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build

    - name: Install Python Package
      run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

    - name: CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest

    - uses: jungwinter/split@v2
      id: split
      with:
        msg: ${{ matrix.py_version }}
        separator: '.'

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
        python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=manylinux_2_27_x86_64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest

    - name: Store the binary wheel
      uses: actions/upload-artifact@v2
      with:
        name: python-package-distributions
        path: ${{github.workspace}}/${{env.BUILD_TYPE}}/_package/dist

# --------------------------------------------------------------------------- #

  build-windows-2019:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    strategy:
      matrix:
        py_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        exclude:
          - py_version: "3.6"

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up Python ${{ matrix.py_version }}
      uses: actions/setup-python@v2
      with:
        python-version: "${{ matrix.py_version }}"

    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install --upgrade build wheel twine

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DCMAKE_GENERATOR="MinGW Makefiles"
        -DUSE_SUPERBUILD=ON
        -DCMAKE_FF_CXX=OFF
        -DCMAKE_LEGACY_PLANNER=OFF
        -DCMAKE_FD=OFF
        -DCMAKE_TARSKI=ON
        -DCMAKE_DOXYGEN_DOCS=OFF
        -DCMAKE_DOXYGEN_FLAT_THEME=OFF
        -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
        -DCMAKE_SPHINX_DOCS=OFF
        -DCMAKE_STATIC_BOOST=ON
        -DCMAKE_TESTING_ENABLED=ON
        -DPY_VERSION="${{ matrix.py_version }}"

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build

    - name: Install Python Package
      run: python -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

    - name: CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest

    - name: Split version code
      uses: xom9ikk/split@v1
      id: split
      with:
        string: ${{ matrix.py_version }}
        separator: .
        limit: -1

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
        python setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=win_amd64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        python -m pytest

    - name: Store the binary wheel
      uses: actions/upload-artifact@v2
      with:
        name: python-package-distributions
        path: ${{github.workspace}}/${{env.BUILD_TYPE}}/_package/dist

# # --------------------------------------------------------------------------- #

#   build-macos-11-M1:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: macos-11
#     strategy:
#       matrix:
#         py_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]


#     steps:
#     - uses: actions/checkout@v2

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

#     # - name: Install platform specific dependencies
#     #   run: |
#     #     brew install flex bison python3 libffi

#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Install pip dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         brew install gcc@10
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DCMAKE_GENERATOR="Unix Makefiles"
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=OFF
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=OFF
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=OFF
#         -DCMAKE_DOXYGEN_FLAT_THEME=OFF
#         -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
#         -DCMAKE_SPHINX_DOCS=OFF
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DCMAKE_C_FLAGS="-target arm64-apple-macos11"
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - name: Split version code
#       uses: xom9ikk/split@v1
#       id: split
#       with:
#         string: ${{ matrix.py_version }}
#         separator: .
#         limit: -1

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_11_0_arm64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         pytest

#     - name: Store the binary wheel
#       uses: actions/upload-artifact@v2
#       with:
#         name: python-package-distributions
#         path: ${{github.workspace}}/${{env.BUILD_TYPE}}/_package/dist

# # --------------------------------------------------------------------------- #

#   build-macos-11:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: macos-11
#     strategy:
#       matrix:
#         py_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]


#     steps:
#     - uses: actions/checkout@v2

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

#     # - name: Install platform specific dependencies
#     #   run: |
#     #     brew install flex bison python3 libffi

#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Install pip dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         brew install gcc@10
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DCMAKE_GENERATOR="Unix Makefiles"
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=OFF
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=OFF
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=OFF
#         -DCMAKE_DOXYGEN_FLAT_THEME=OFF
#         -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
#         -DCMAKE_SPHINX_DOCS=OFF
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - name: Split version code
#       uses: xom9ikk/split@v1
#       id: split
#       with:
#         string: ${{ matrix.py_version }}
#         separator: .
#         limit: -1

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_11_0_x86_64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         pytest

#     - name: Store the binary wheel
#       uses: actions/upload-artifact@v2
#       with:
#         name: python-package-distributions
#         path: ${{github.workspace}}/${{env.BUILD_TYPE}}/_package/dist

# # --------------------------------------------------------------------------- #

#   build-macos-10_15:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: macos-10.15
#     strategy:
#       matrix:
#         py_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]

#     steps:
#     - uses: actions/checkout@v2

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

#     # - name: Install platform specific dependencies
#     #   run: |
#     #     brew install flex bison python3 libffi

#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Install dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         brew install gcc@10
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DCMAKE_GENERATOR="Unix Makefiles"
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=OFF
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=OFF
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=OFF
#         -DCMAKE_DOXYGEN_FLAT_THEME=OFF
#         -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
#         -DCMAKE_SPHINX_DOCS=OFF
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - name: Split version code
#       uses: xom9ikk/split@v1
#       id: split
#       with:
#         string: ${{ matrix.py_version }}
#         separator: .
#         limit: -1

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_10_15_x86_64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         pytest

#     - name: Store the binary wheel
#       uses: actions/upload-artifact@v2
#       with:
#         name: python-package-distributions
#         path: ${{github.workspace}}/${{env.BUILD_TYPE}}/_package/dist

# --------------------------------------------------------------------------- #

  deploy:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs:
    - build-windows-2019
    # - build-macos-10_15
    # - build-macos-11-M1
    # - build-macos-11
    - build-ubuntu-18
    - build-ubuntu-20

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade build wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Download all the dists
      uses: actions/download-artifact@v2
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TEST_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        packages_dir: dist
