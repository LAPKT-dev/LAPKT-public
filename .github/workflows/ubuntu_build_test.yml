name: BuildTestLAPKT

on:
  push:
    branches: [ Devel2.0 ]
  pull_request:
    branches: [ Devel2.0 ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_FF=ON -DCMAKE_FD=OFF -DCMAKE_VAL=OFF
        -DCMAKE_DOXYGEN_DOCS=ON -DCMAKE_DOXYGEN_FLAT_THEME=OFF -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
        -DCMAKE_SPHINX_DOCS=OFF
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DCMAKE_STATIC_BOOST=ON
        -DCMAKE_TESTING_ENABLED=ON

    - name: Build
      # Build your program with the given configuration
      run: >
      cmake --build ${{github.workspace}}/build 
      --config ${{env.BUILD_TYPE}}
      --target clean

    - name: Assemble LAPKT Python Package
      -run: cmake --install  ${{github.workspace}}/build

    - name: CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Test with ctest
      run: |
        ctest

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Pytest
      working-directory: ${{github.workspace}}/${{env.BUILD_TYPE}}
      run: |
        pytest
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics