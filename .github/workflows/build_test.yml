name: BuildTest

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:

# # --------------------------------------------------------------------------- #

#   build-ubuntu-20:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-20.04
#     strategy:
#       matrix:
#         py_version: ["3.7", "3.8", "3.9", "3.10"]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}
    
#     - name: Install platform specific requirements
#       run: |
#         sudo apt-get install -y flex bison libfl-dev
#       # python3-dev python3 libfl-dev
      
#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v4
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Print GLIBC version
#       run: ldd --version

#     - name: Install pip dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=ON
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=ON
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=ON
#         -DCMAKE_DOXYGEN_FLAT_THEME=ON
#         -DCMAKE_DOXYGEN_AWESOME_THEME=ON
#         -DCMAKE_SPHINX_DOCS=ON
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - uses: jungwinter/split@v2
#       id: split
#       with:
#         msg: ${{ matrix.py_version }}
#         separator: '.'

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=manylinux_2_31_x86_64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         pytest
        
#     - name: Lint with flake8
#       run: |
#         # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# # --------------------------------------------------------------------------- #

#   build-ubuntu-18:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-18.04
#     strategy:
#       matrix:
#         py_version: ["3.7", "3.8", "3.9", "3.10"]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}
    
#     - name: Install platform specific requirements
#       run: |
#         sudo apt-get install -y flex bison libfl-dev
#       # python3-dev python3
      
#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v4
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Print GLIBC version
#       run: ldd --version

#     - name: Install pip dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       # Notes- 
#       # 1. Doxygen fails on Ubuntu 18- Requires glibc 2.29
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=ON
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=ON
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=OFF 
#         -DCMAKE_DOXYGEN_FLAT_THEME=OFF
#         -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
#         -DCMAKE_SPHINX_DOCS=OFF 
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - uses: jungwinter/split@v2
#       id: split
#       with:
#         msg: ${{ matrix.py_version }}
#         separator: '.'

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=manylinux_2_27_x86_64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         pytest
        
#     - name: Lint with flake8
#       run: |
#         # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# --------------------------------------------------------------------------- #

  build-windows-2019:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    strategy:
      matrix:
        # py_version: ["3.7", "3.8", "3.9", "3.10"]
        py_version: ["3.10"]
        

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.py_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.py_version }}"

    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install --upgrade build wheel twine

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DCMAKE_GENERATOR="MinGW Makefiles"
        -DUSE_SUPERBUILD=ON
        -DCMAKE_FF_CXX=OFF
        -DCMAKE_LEGACY_PLANNER=OFF
        -DCMAKE_FD=ON
        -DCMAKE_TARSKI=ON
        -DCMAKE_DOXYGEN_DOCS=OFF
        -DCMAKE_DOXYGEN_FLAT_THEME=OFF
        -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
        -DCMAKE_SPHINX_DOCS=OFF
        -DCMAKE_STATIC_BOOST=ON
        -DCMAKE_TESTING_ENABLED=ON
        -DPY_VERSION="${{ matrix.py_version }}"

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build

    - name: Install Python Package
      run: python -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

    - name: CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest

    - name: Split version code
      uses: xom9ikk/split@v1
      id: split
      with:
        string: ${{ matrix.py_version }}
        separator: .
        limit: -1

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
        python setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=win_amd64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest

    - name: Lint with flake8
      run: |
        # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
        python -m flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# --------------------------------------------------------------------------- #

  # build-macos-12:
  #   # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #   # You can convert this to a matrix build if you need cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: macos-12
  #   strategy:
  #     matrix:
  #       # py_version: ["3.7", "3.8", "3.9", "3.10"]
  #       py_version: ["3.8", "3.9", "3.10"]
  #       # py_version: ["3.9", "3.10"]
  #       exclude:
  #         - py_version: "3.9"

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Remove previous builds if any
  #     run: | 
  #       rm -rf ${{github.workspace}}/build
  #       rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

  #   # - name: Install platform specific dependencies
  #   #   run: |
  #   #     brew install flex bison python3 libffi

  #   - name: Set up Python ${{ matrix.py_version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "${{ matrix.py_version }}"

  #   - name: Install pip dependencies
  #     run: |
  #       python3 -m pip install --upgrade pip
  #       python3 -m pip install flake8 pytest
  #       python3 -m pip install --upgrade build wheel twine
  #       brew install gcc@10
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: > 
  #       cmake -B ${{github.workspace}}/build 
  #       -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #       -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
  #       -DCMAKE_GENERATOR="Unix Makefiles"
  #       -DUSE_SUPERBUILD=ON
  #       -DCMAKE_FF_CXX=OFF
  #       -DCMAKE_LEGACY_PLANNER=OFF
  #       -DCMAKE_FD=ON
  #       -DCMAKE_TARSKI=ON
  #       -DCMAKE_DOXYGEN_DOCS=OFF
  #       -DCMAKE_DOXYGEN_FLAT_THEME=OFF
  #       -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
  #       -DCMAKE_SPHINX_DOCS=OFF
  #       -DCMAKE_STATIC_BOOST=ON
  #       -DCMAKE_TESTING_ENABLED=ON
  #       -DPY_VERSION="${{ matrix.py_version }}"

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: > 
  #       cmake --build ${{github.workspace}}/build

  #   - name: Install Python Package
  #     run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

  #   - name: CTest
  #     working-directory: ${{github.workspace}}/build
  #     # Execute tests defined by the CMake configuration.  
  #     # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #     run: ctest

  #   - name: Split version code
  #     uses: xom9ikk/split@v1
  #     id: split
  #     with:
  #       string: ${{ matrix.py_version }}
  #       separator: .
  #       limit: -1

  #   - name: Build Pypi Python Package
  #     run: |
  #       cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
  #       python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_11_0_x86_64

  #   - name: Pytest
  #     working-directory: ${{github.workspace}}
  #     run: |
  #       lapkt_cmd.py BFWS --lapkt_instance_generator Tarski -d ${{github.workspace}}/test/classical_instance_small/visitall-opt11-strips/domain.pddl -p ${{github.workspace}}/test/classical_instance_small/visitall-opt11-strips/problem02-full.pddl

  #   - name: Lint with flake8
  #     run: |
  #       # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# # --------------------------------------------------------------------------- #

  # build-macos-11-M1:
  #   # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #   # You can convert this to a matrix build if you need cross-platform coverage.
  #   # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #   runs-on: macos-11
  #   strategy:
  #     matrix:
  #       # py_version: ["3.7", "3.8", "3.9", "3.10"]
  #       py_version: ["3.9", "3.10"]
  #       # exclude:
  #       #   - py_version: "3.8"

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Remove previous builds if any
  #     run: | 
  #       rm -rf ${{github.workspace}}/build
  #       rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

  #   # - name: Install platform specific dependencies
  #   #   run: |
  #   #     brew install flex bison python3 libffi

  #   - name: Set up Python ${{ matrix.py_version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "${{ matrix.py_version }}"

  #   - name: Install pip dependencies
  #     run: |
  #       python3 -m pip install --upgrade pip
  #       python3 -m pip install flake8 pytest
  #       python3 -m pip install --upgrade build wheel twine
  #       brew install gcc@10
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: > 
  #       cmake -B ${{github.workspace}}/build 
  #       -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #       -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
  #       -DCMAKE_GENERATOR="Unix Makefiles"
  #       -DUSE_SUPERBUILD=ON
  #       -DCMAKE_FF_CXX=OFF
  #       -DCMAKE_LEGACY_PLANNER=OFF
  #       -DCMAKE_FD=ON
  #       -DCMAKE_TARSKI=ON
  #       -DCMAKE_DOXYGEN_DOCS=OFF
  #       -DCMAKE_DOXYGEN_FLAT_THEME=OFF
  #       -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
  #       -DCMAKE_SPHINX_DOCS=OFF
  #       -DCMAKE_STATIC_BOOST=ON
  #       -DCMAKE_TESTING_ENABLED=ON
  #       -DCMAKE_C_FLAGS="-target arm64-apple-macos11"
  #       -DPY_VERSION="${{ matrix.py_version }}"

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: > 
  #       cmake --build ${{github.workspace}}/build

  #   - name: Install Python Package
  #     run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

  #   - name: CTest
  #     working-directory: ${{github.workspace}}/build
  #     # Execute tests defined by the CMake configuration.  
  #     # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #     run: ctest

  #   - name: Split version code
  #     uses: xom9ikk/split@v1
  #     id: split
  #     with:
  #       string: ${{ matrix.py_version }}
  #       separator: .
  #       limit: -1

  #   - name: Build Pypi Python Package
  #     run: |
  #       cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
  #       python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_11_0_arm64

  #   - name: Pytest
  #     working-directory: ${{github.workspace}}
  #     run: |
  #       pytest

  #   - name: Lint with flake8
  #     run: |
  #       # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# --------------------------------------------------------------------------- #

#   build-macos-11:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: macos-11
#     strategy:
#       matrix:
#         # py_version: ["3.7", "3.8", "3.9", "3.10"]
#         py_version: ["3.8", "3.9", "3.10"]
#         # py_version: ["3.9", "3.10"]
#         exclude:
#           - py_version: "3.9"

#     steps:
#     - uses: actions/checkout@v3

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

#     # - name: Install platform specific dependencies
#     #   run: |
#     #     brew install flex bison python3 libffi

#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v4
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Install pip dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         brew install gcc@10
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DCMAKE_GENERATOR="Unix Makefiles"
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=OFF
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=ON
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=OFF
#         -DCMAKE_DOXYGEN_FLAT_THEME=OFF
#         -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
#         -DCMAKE_SPHINX_DOCS=OFF
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - name: Split version code
#       uses: xom9ikk/split@v1
#       id: split
#       with:
#         string: ${{ matrix.py_version }}
#         separator: .
#         limit: -1

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_11_0_x86_64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         lapkt_cmd.py BFWS --lapkt_instance_generator Tarski -d ${{github.workspace}}/test/classical_instance_small/visitall-opt11-strips/domain.pddl -p ${{github.workspace}}/test/classical_instance_small/visitall-opt11-strips/problem02-full.pddl

#     - name: Lint with flake8
#       run: |
#         # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# # # --------------------------------------------------------------------------- #
        
#   build-macos-10_15:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: macos-10.15
#     strategy:
#       matrix:
#         # py_version: ["3.7", "3.8", "3.9", "3.10"]
#         py_version: ["3.8", "3.9", "3.10"]
#         # py_version: ["3.9", "3.10"]
#         exclude:
#           - py_version: "3.9"

#     steps:
#     - uses: actions/checkout@v3

#     - name: Remove previous builds if any
#       run: | 
#         rm -rf ${{github.workspace}}/build
#         rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

#     # - name: Install platform specific dependencies
#     #   run: |
#     #     brew install flex bison python3 libffi

#     - name: Set up Python ${{ matrix.py_version }}
#       uses: actions/setup-python@v4
#       with:
#         python-version: "${{ matrix.py_version }}"

#     - name: Install dependencies
#       run: |
#         python3 -m pip install --upgrade pip
#         python3 -m pip install flake8 pytest
#         python3 -m pip install --upgrade build wheel twine
#         brew install gcc@10
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: > 
#         cmake -B ${{github.workspace}}/build 
#         -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#         -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
#         -DCMAKE_GENERATOR="Unix Makefiles"
#         -DCMAKE_C_COMPILER=gcc-10
#         -DCMAKE_CXX_COMPILER=g++-10
#         -DUSE_SUPERBUILD=ON
#         -DCMAKE_FF_CXX=OFF
#         -DCMAKE_LEGACY_PLANNER=OFF
#         -DCMAKE_FD=ON
#         -DCMAKE_TARSKI=ON
#         -DCMAKE_DOXYGEN_DOCS=OFF
#         -DCMAKE_DOXYGEN_FLAT_THEME=OFF
#         -DCMAKE_DOXYGEN_AWESOME_THEME=OFF
#         -DCMAKE_SPHINX_DOCS=OFF
#         -DCMAKE_STATIC_BOOST=ON
#         -DCMAKE_TESTING_ENABLED=ON
#         -DPY_VERSION="${{ matrix.py_version }}"

#     - name: Build
#       # Build your program with the given configuration
#       run: > 
#         cmake --build ${{github.workspace}}/build

#     - name: Install Python Package
#       run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/_package

#     - name: CTest
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest

#     - name: Split version code
#       uses: xom9ikk/split@v1
#       id: split
#       with:
#         string: ${{ matrix.py_version }}
#         separator: .
#         limit: -1

#     - name: Build Pypi Python Package
#       run: |
#         cd ${{github.workspace}}/${{env.BUILD_TYPE}}/_package
#         python3 setup.py bdist_wheel --python-tag=cp${{ steps.split.outputs._0 }}${{ steps.split.outputs._1 }} --plat-name=macosx_10_15_x86_64

#     - name: Pytest
#       working-directory: ${{github.workspace}}
#       run: |
#         pytest
    
#     - name: Test lapkt installation
#       run: |
#         python3  ${{github.workspace}}/src/python/_package/script/lapkt_cmd.py BFWS -d ${{github.workspace}}/test/classical_instance_small/visitall-opt11-strips/domain.pddl -p ${{github.workspace}}/test/classical_instance_small/visitall-opt11-strips/problem02-full.pddl
#         cat plan.ipc

#     - name: Lint with flake8
#       run: |
#         # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
