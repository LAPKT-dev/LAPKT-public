name: BuildTest

on:
  push:
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu-latest:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Print GLIBC version
      run: ldd --version

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest
        python3 -m pip install --upgrade build wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build --target install

    - name: Install Python Package
      run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release
        python3 setup.py bdist_wheel --plat-name=manylinux_2_31_x86_64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest
        
    - name: Lint with flake8
      run: |
        # DON'T[ANU: To be changed later] stop the build if there are Python syntax errors or undefined names
        flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-ubuntu-18:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    
    - name: Print GLIBC version
      run: ldd --version

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest
        python3 -m pip install --upgrade build wheel twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build --target install

    - name: Install Python Package
      run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release
        python3 setup.py bdist_wheel --plat-name=manylinux_2_27_x86_64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest

  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        py -m pip install --upgrade pip
        py -m pip install flake8 pytest
        py -m pip install --upgrade build wheel twine

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DCMAKE_GENERATOR="MinGW Makefiles"

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build --target install

    - name: Install Python Package
      run: py -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release
        py setup.py bdist_wheel --plat-name=win_amd64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest

  build-macos-latest:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest
        python3 -m pip install --upgrade build wheel twine
        brew install gcc@10
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DCMAKE_GENERATOR="Unix Makefiles"
        -DCMAKE_C_COMPILER=gcc-10
        -DCMAKE_CXX_COMPILER=g++-10

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build --target install

    - name: Install Python Package
      run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release
        python3 setup.py bdist_wheel --plat-name=macosx_11_0_x86_64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest
        
  build-macos-10_15:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2

    - name: Remove previous builds if any
      run: | 
        rm -rf ${{github.workspace}}/build
        rm -rf ${{github.workspace}}/${{env.BUILD_TYPE}}

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest
        python3 -m pip install --upgrade build wheel twine
        brew install gcc@10
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: > 
        cmake -B ${{github.workspace}}/build 
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/${{env.BUILD_TYPE}}
        -DCMAKE_GENERATOR="Unix Makefiles"
        -DCMAKE_C_COMPILER=gcc-10
        -DCMAKE_CXX_COMPILER=g++-10

    - name: Build
      # Build your program with the given configuration
      run: > 
        cmake --build ${{github.workspace}}/build --target install

    - name: Install Python Package
      run: python3 -m pip install ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release

    - name: Build Pypi Python Package
      run: |
        cd ${{github.workspace}}/${{env.BUILD_TYPE}}/pypi_release
        python3 setup.py bdist_wheel --plat-name=macosx_10_15_x86_64

    - name: Pytest
      working-directory: ${{github.workspace}}
      run: |
        pytest