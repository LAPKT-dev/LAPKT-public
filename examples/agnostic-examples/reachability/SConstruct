import os

debug = ARGUMENTS.get('debug', 0)

common_env = Environment()

include_paths = ['../../../include', '../../../interfaces/agnostic', '../..' ]
lib_paths = [ ]
libs = [ ]

common_env.Append( CPPPATH = [ os.path.abspath(p) for p in include_paths ] )

if int(debug) == 1 :
	common_env.Append( CCFLAGS = ['-g','-Wall', '-std=c++0x', '-DDEBUG' ] )
else:
	common_env.Append( CCFLAGS = ['-O3','-Wall', '-std=c++0x', '-DNDEBUG'] )

cxx_sources = Glob('*.cxx')
c_sources = Glob('*.c')
src_objs = [ common_env.Object(s) for s in cxx_sources ] + [ common_env.Object(s) for s in c_sources ]

Export('common_env')
src_objs += SConscript( '../../common/SConscript', 'common_env' )
generic_objs = SConscript('../../../src/SConscript.aptk')
agnostic_objs = SConscript('../../../interfaces/agnostic/SConscript.agnostic')
ff_wrapper_objs = SConscript('../../../interfaces/ff-wrapped/SConscript.ff')

common_env.Append( LIBS=libs)
common_env.Append( LIBPATH=[ os.path.abspath(p) for p in lib_paths ] )

common_env.Program( 'reachability', src_objs  + generic_objs + agnostic_objs + ff_wrapper_objs )
